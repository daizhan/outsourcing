{"version":3,"sources":["layer.js","utils.js","color-picker.js","popup-menu.js","text-input.js","common.js","templates/attr-tpl.js","attrs.js","templates/tool-tpl.js","tools.js","templates/device-tpl.js","devices.js","view.js","model.js","collection.js","draw.js"],"names":["define","doc","document","query","claname","S","s","config","type","shade","shadeClose","fixed","anim","ready","extend","obj","newobj","JSON","parse","stringify","i","timer","end","touch","elem","fn","addEventListener","e","call","this","index","classs","Layer","options","that","className","view","prototype","layerbox","createElement","id","setAttribute","join","title","titype","button","btn","btndom","btns","length","top","hasOwnProperty","style","body","scrollTop","content","skin","innerHTML","dialogs","dialen","layer","close","getAttribute","appendChild","success","action","time","setTimeout","no","yes","children","btnlen","ii","v","open","o","topNotify","notifyType","ibox","removeChild","clearTimeout","closeAll","boxs","len","$","encodeHtmlAttr","attr","replace","match","encodeHtml","html","text","encodeHtmlAndAttr","count","num","distance","pointA","pointB","getRectPoints","minX","Math","min","x","minY","y","maxX","max","maxY","rectCoordCompare","rectA","rectB","upperX","rect","isRectContain","bigRect","smallRect","isRectPureIntersect","isContain","isRectNotIntersect","isRectIntersect","direction","rightUp","leftUp","leftDown","rightDown","getPointDirection","getScaleOffset","lastPos","currPos","offset","Utils","ColorPicker","formatColor","color","toString","initColor","self","startColor","parseInt","endColor","colors","whiteBack","all","floor","push","colorList","forEach","value","split","ceil","item","createDom","whiteBackHtml","allHtml","append","markSelecteColor","$popup","find","addClass","val","css","setPopupPos","$target","height","gap","left","clean","remove","triggerType","off","bindBodyClickEvent","setEvent","callback","hover","on","event","target","hasClass","parents","init","Menu","name","selector","data","liHtml","menus","operate","status","shortcut","scrollLeft","window","clientX","clientY","click","TextInput","padding","$p","range","createRange","sel","getSelection","selectNodeContents","removeAllRanges","addRange","pos","min-height","min-width","width","submitText","keyCode","keydown","blur","utils","colorPicker","popupMenu","textInput","_","Backbone","SVG","tpl","C","attrModel","Model","defaults","undo","available","redo","formatBrush","scale","default","list","font","fontSize","textColor","textBold","textItalic","arrange","fillColor","borderColor","borderStyle","borderWidth","startArrow","endArrow","moveUp","moveDown","copy","cut","paste","delete","size","h","w","viewId","sync","mothod","model","set","cid","attrView","View","commonAttrs","selectedAttrs","svgElemDisabledAttrs","line","device","categories","attrs","tagName","initialize","listenTo","render","showTypeAttr","template","getAttrClassName","attrData","modelData","toJSON","indexOf","formatData","category","attrCategories","$el","events","click .attrs li","keydown .scale input","focus .scale input","click .font-size span","keydown .font-size input","focus .font-size input","Array","isArray","types","save","disabledAttr","intersection","each","key","setAttr","get","check","trigger","toUpperCase","slice","getProperFontSizeValue","manualSetFontSize","select","modifyFontSize","getProperScaleValue","manualSetScale","showScaleItems","isSelected","selectedValue","showFontItems","showColorItems","showLineArrowItems","attrName","showBorderWidthItems","showBorderStyleItems","showArrangeItems","showAttrItems","currentTarget","nodeName","toolModel","tools","toolView","preventBodyClear","selectDone","clearItemSelected","setSelected","selectTool","removeClass","getSelected","deviceModel","devices","deviceView","selectDevice","showDeviceIdList","updateDeviceIdStatus","getAvailableList","idList","availables","setDeviceIdStatus","listData","menu","deviceId","deviceName","BaseView","domToSvgPos","svgDoc","getSvgRoot","$main","getMainContainerElem","node","docScrollTop","docScrollLeft","isSvgNode","svg","getMousePos","baseSvg","setFont","setFontSize","setTextColor","setFillColor","setBorderColor","setBorderWidth","setBorderStyle","setLinePoint","setArrange","selectedView","removeSelected","setSvgText","boxWidth","bbox","svgText","textBox","lineText","str","lastStr","dy","tspan","add","newLine","getDefaultStyle","getCurrentStyle","setStyle","createBorder","positionGroup","isShow","corderWidth","box","group","centerPoints","cx","cy","path","back","borderGroup","stroke","fill","createConnectPoints","circle","pointGroup","center","setPointGroupStatus","setBorderGroupStatus","moveView","transform","moveEnd","resizeView","centerX","centerY","LineView","defaultStyle","strokeColor","defaultSize","G","lineGroup","setElement","move","resize","points","getMovePoints","start","mid","getSize","getLineDefaultPoints","getPolylineDefaultPoints","point1","point2","getPoints","getEndPoints","getMidPoints","create","d","stroke-width","clear","RectView","radius","rectGroup","dblclick","showTextEdit","rbox","leading","isShowPoints","DeviceView","iconPadding","deviceGroup","updateDeviceId","setDeviceId","newId","previous","getImgUrl","img","family","image","base","zIndex","fontStyle","fullColor","rotate","parentId","method","LineModel","defaults_parent","result","defaults_self","RectModel","DeviceModel","Collection","LineCollection","RectCollection","DeviceCollection","require","baseUrl","paths","jquery","underscore","backbone","Attr","Tool","Device","data1","AppView","bg","selectTipsBox","deviceCollections","rectCollections","lineCollections","elemToBeAdd","subViews","itemToBeAdd","attrSelected","selectedViews","isEdit","initAttr","initTool","initDevice","setRightBtnMenu","setOtherEvents","setBodyEvents","getSelectedViewByTarget","getSubView","isMoveOperate","isClickOnEle","isClickOnSvgView","isClickOnAttrEle","isClickOnPopup","isClickOnDraw","isClickOnTool","isClickOnDevice","getClickAttr","endMoveView","setMoveEvents","mousedown","mousemove","setResizeEvents","order","scaleOffset","mouseup","removeSelectedView","updateAttrBySelectedView","selectView","isAppend","splice","getInsideView","area","views","x2","y2","setSelectEvents","isSelecting","insideViews","ctrlKey","startPos","endPos","rectPoints","abs","setSelectedItem","clearItemToBeAdd","clearSelectedItem","showItemToBeAdd","createItem","createItemView","isToBeAdd","removeItemView","collection","getTypeItem","destroy","addItem","addItemView","addSubView","setAddViewEvents","scaleSvg","renderGrid","shadowColor","deepColor","lineWidth","$elem","contextmenu","el","deviceHeight","offsetHeight","after","app","Draw","checkData","validData","eventType","targetType"],"mappings":"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","file":"main.js","sourcesContent":["/*! layer mobile v2.0 弹层组件移动版\r\n * 扩展列表\r\n * 1. className 选项设置在最外层元素\r\n * 2. 新增方法topNotify 等同于 layer.open({className: \"top-notify top-xxx-notify\"}), xxx 为传过过来notify 类型， 可以是info/error/success 之一\r\n */\r\ndefine('layer',[],function() {\r\n    \"use strict\";\r\n    var doc = document,\r\n        query = 'querySelectorAll',\r\n        claname = 'getElementsByClassName',\r\n        S = function(s) {\r\n            return doc[query](s);\r\n        };\r\n\r\n    //默认配置\r\n    var config = {\r\n        type: 0,\r\n        shade: true,\r\n        shadeClose: true,\r\n        fixed: true,\r\n        anim: 'scale' //默认动画类型\r\n    };\r\n\r\n    var ready = {\r\n        extend: function(obj) {\r\n            var newobj = JSON.parse(JSON.stringify(config));\r\n            for (var i in obj) {\r\n                newobj[i] = obj[i];\r\n            }\r\n            return newobj;\r\n        },\r\n        timer: {},\r\n        end: {}\r\n    };\r\n\r\n    //点触事件\r\n    ready.touch = function(elem, fn) {\r\n        elem.addEventListener('click', function(e) {\r\n            fn.call(this, e);\r\n        }, false);\r\n    };\r\n\r\n    var index = 0,\r\n        classs = ['layui-m-layer'],\r\n        Layer = function(options) {\r\n            var that = this;\r\n            that.config = ready.extend(options);\r\n            if (that.config.className) {\r\n                that.config.className = [classs[0], that.config.className];\r\n            } else {\r\n                that.config.className = classs;\r\n            }\r\n            that.view();\r\n        };\r\n\r\n    Layer.prototype.view = function() {\r\n        var that = this,\r\n            config = that.config,\r\n            layerbox = doc.createElement('div');\r\n\r\n        that.id = layerbox.id = classs[0] + index;\r\n        layerbox.setAttribute('class', that.config.className.join(\" \") + ' ' + classs[0] + (config.type || 0));\r\n        layerbox.setAttribute('index', index);\r\n\r\n        //标题区域\r\n        var title = (function() {\r\n            var titype = typeof config.title === 'object';\r\n            return config.title ?\r\n                '<h3 style=\"' + (titype ? config.title[1] : '') + '\">' + (titype ? config.title[0] : config.title) + '</h3>' :\r\n                '';\r\n        }());\r\n\r\n        //按钮区域\r\n        var button = (function() {\r\n            typeof config.btn === 'string' && (config.btn = [config.btn]);\r\n            var btns = (config.btn || []).length,\r\n                btndom;\r\n            if (btns === 0 || !config.btn) {\r\n                return '';\r\n            }\r\n            btndom = '<span yes type=\"1\">' + config.btn[0] + '</span>'\r\n            if (btns === 2) {\r\n                btndom = '<span no type=\"0\">' + config.btn[1] + '</span>' + btndom;\r\n            }\r\n            return '<div class=\"layui-m-layerbtn\">' + btndom + '</div>';\r\n        }());\r\n\r\n        if (!config.fixed) {\r\n            config.top = config.hasOwnProperty('top') ? config.top : 100;\r\n            config.style = config.style || '';\r\n            config.style += ' top:' + (doc.body.scrollTop + config.top) + 'px';\r\n        }\r\n\r\n        if (config.type === 2) {\r\n            config.content = '<i></i><i class=\"layui-m-layerload\"></i><i></i><p>' + (config.content || '') + '</p>';\r\n        }\r\n\r\n        if (config.skin) config.anim = 'up';\r\n        if (config.skin === 'msg') config.shade = false;\r\n\r\n        layerbox.innerHTML = (config.shade ? '<div ' + (typeof config.shade === 'string' ? 'style=\"' + config.shade + '\"' : '') + ' class=\"layui-m-layershade\"></div>' : '') +\r\n            '<div class=\"layui-m-layermain\" ' + (!config.fixed ? 'style=\"position:static;\"' : '') + '>' +\r\n            '<div class=\"layui-m-layersection\">' +\r\n            '<div class=\"layui-m-layerchild ' + (config.skin ? 'layui-m-layer-' + config.skin + ' ' : '') + ' ' + (config.anim ? 'layui-m-anim-' + config.anim : '') + '\" ' + (config.style ? 'style=\"' + config.style + '\"' : '') + '>' +\r\n            title +\r\n            '<div class=\"layui-m-layercont\">' + config.content + '</div>' +\r\n            button +\r\n            '</div>' +\r\n            '</div>' +\r\n            '</div>';\r\n\r\n        if (!config.type || config.type === 2) {\r\n            var dialogs = doc[claname](classs[0] + config.type),\r\n                dialen = dialogs.length;\r\n            if (dialen >= 1) {\r\n                layer.close(dialogs[0].getAttribute('index'))\r\n            }\r\n        }\r\n\r\n        document.body.appendChild(layerbox);\r\n        var elem = that.elem = S('#' + that.id)[0];\r\n        config.success && config.success(elem);\r\n\r\n        that.index = index++;\r\n        that.action(config, elem);\r\n    };\r\n\r\n    Layer.prototype.action = function(config, elem) {\r\n        var that = this;\r\n\r\n        //自动关闭\r\n        if (config.time) {\r\n            ready.timer[that.index] = setTimeout(function() {\r\n                layer.close(that.index);\r\n            }, config.time * 1000);\r\n        }\r\n\r\n        //确认取消\r\n        var btn = function() {\r\n            var type = this.getAttribute('type');\r\n            if (type == 0) {\r\n                config.no && config.no();\r\n                layer.close(that.index);\r\n            } else {\r\n                config.yes ? config.yes(that.index) : layer.close(that.index);\r\n            }\r\n        };\r\n        if (config.btn) {\r\n            var btns = elem[claname]('layui-m-layerbtn')[0].children,\r\n                btnlen = btns.length;\r\n            for (var ii = 0; ii < btnlen; ii++) {\r\n                ready.touch(btns[ii], btn);\r\n            }\r\n        }\r\n\r\n        //点遮罩关闭\r\n        if (config.shade && config.shadeClose) {\r\n            var shade = elem[claname]('layui-m-layershade')[0];\r\n            ready.touch(shade, function() {\r\n                layer.close(that.index, config.end);\r\n            });\r\n        }\r\n\r\n        config.end && (ready.end[that.index] = config.end);\r\n    };\r\n\r\n    var layer = {\r\n        v: '2.0',\r\n        index: index,\r\n\r\n        //核心方法\r\n        open: function(options) {\r\n            var o = new Layer(options || {});\r\n            return o.index;\r\n        },\r\n\r\n        topNotify: function(notifyType, options) {\r\n            options.className = \"top-notify top-\" + notifyType + \"-notify\";\r\n            this.open(options);\r\n        },\r\n\r\n        close: function(index) {\r\n            var ibox = S('#' + classs[0] + index)[0];\r\n            if (!ibox) return;\r\n            ibox.innerHTML = '';\r\n            doc.body.removeChild(ibox);\r\n            clearTimeout(ready.timer[index]);\r\n            delete ready.timer[index];\r\n            typeof ready.end[index] === 'function' && ready.end[index]();\r\n            delete ready.end[index];\r\n        },\r\n\r\n        //关闭所有layer层\r\n        closeAll: function() {\r\n            var boxs = doc[claname](classs[0]);\r\n            for (var i = 0, len = boxs.length; i < len; i++) {\r\n                layer.close((boxs[0].getAttribute('index') | 0));\r\n            }\r\n        }\r\n    };\r\n    return layer;\r\n});\n","define('utils',[\"jquery\"], function($) {\r\n    return {\r\n        encodeHtmlAttr: function(attr) {\r\n            return attr.replace(/'|\"/g, function(match) {\r\n                if (match == '\"') {\r\n                    return \"&quot;\";\r\n                }\r\n                return \"&#39;\";\r\n            });\r\n        },\r\n        encodeHtml: function(html) {\r\n            return $(\"<div></div>\").text(html).html();\r\n        },\r\n        encodeHtmlAndAttr: function(content) {\r\n            return this.encodeHtmlAttr($(\"<div></div>\").text(content).html());\r\n        },\r\n        count: (function() {\r\n            var count = 0;\r\n            return function(num) {\r\n                if (typeof num != \"undefined\") {\r\n                    num = num || 0;\r\n                } else {\r\n                    num = 1;\r\n                }\r\n                count += num;\r\n                return count;\r\n            };\r\n        })(),\r\n\r\n        distance: function(pointA, pointB){},\r\n        // 根据对角线上点，计算矩形的四个点，按照顺时针顺序返回点集\r\n        getRectPoints: function(pointA, pointB){\r\n            var minX = Math.min(pointA.x, pointB.x),\r\n                minY = Math.min(pointA.y, pointB.y),\r\n                maxX = Math.max(pointA.x, pointB.x),\r\n                maxY = Math.max(pointA.y, pointB.y);\r\n            return [\r\n                {x: minX, y: minY},\r\n                {x: maxX, y: minY},\r\n                {x: maxX, y: maxY},\r\n                {x: minX, y: maxY}\r\n            ];\r\n        },\r\n        rectCoordCompare: function(rectA, rectB){\r\n            return {\r\n                upperX: rect\r\n            };\r\n        },\r\n        // is big contain small\r\n        isRectContain: function(bigRect, smallRect) {\r\n            if ((bigRect[0].x <= smallRect[0].x) &&\r\n                (bigRect[0].y <= smallRect[0].y) &&\r\n                (bigRect[1].x >= smallRect[1].x) &&\r\n                (bigRect[1].y >= smallRect[1].y)) {\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n        isRectPureIntersect: function(rectA, rectB) {\r\n            var isContain = this.isRectContain(rectA, rectB) || this.isRectContain(rectB, rectA);\r\n            return !this.isRectNotIntersect(rectA, rectB) && !isContain;\r\n        },\r\n        isRectIntersect: function(rectA, rectB) {\r\n            return !this.isRectNotIntersect(rectA, rectB);\r\n        },\r\n        isRectNotIntersect: function(rectA, rectB) {\r\n            if ((rectA[0].x > rectB[1].x) ||\r\n                (rectA[0].y > rectB[1].y) ||\r\n                (rectB[0].x > rectA[1].x) ||\r\n                (rectB[0].y > rectA[1].y)) {\r\n                return true;\r\n            }\r\n            return false;\r\n        },\r\n        direction: {\r\n            rightUp: 1,\r\n            leftUp: 2,\r\n            leftDown: 3,\r\n            rightDown: 4\r\n        },\r\n        getPointDirection: function(pointA, pointB){\r\n            if (pointA.x > pointB.x && pointA.y >= pointB.y) {\r\n                return this.direction.rightDown;\r\n            }\r\n            if (pointA.x < pointB.x && pointA.y <= pointB.y) {\r\n                return this.direction.leftUp;\r\n            }\r\n            if (pointA.x >= pointB.x && pointA.y < pointB.y) {\r\n                return this.direction.rightUp;\r\n            }\r\n            if (pointA.x < pointB.x && pointA.y >= pointB.y) {\r\n                return this.direction.leftDown;\r\n            }\r\n        },\r\n        getScaleOffset: function(index, lastPos, currPos){\r\n            var offset = {\r\n                x: currPos.x - lastPos.x,\r\n                y: currPos.y - lastPos.y\r\n            }\r\n            if (index == 1) {\r\n                offset.x = -offset.x;\r\n                offset.y = -offset.y;\r\n            } else if (index == 2) {\r\n                offset.y = -offset.y;\r\n            } else if (index == 4) {\r\n                offset.x = -offset.x;\r\n            }\r\n            return offset;\r\n        },\r\n    }\r\n});\n","define('color-picker',[\"jquery\", \"utils\"], function($, Utils) {\r\n    var ColorPicker = {\r\n        formatColor: function(color) {\r\n            if (color <= 0) {\r\n                color = 0;\r\n            } else if (color >= 255) {\r\n                color = 255;\r\n            }\r\n            color = color.toString(16);\r\n            if (color.length <= 1) {\r\n                color = \"0\" + color;\r\n            }\r\n            return color;\r\n        },\r\n        initColor: function() {\r\n            var self = this,\r\n                startColor = parseInt(\"ff\", 16),\r\n                endColor = parseInt(\"00\", 16),\r\n                count = 12,\r\n                colors = {\r\n                    whiteBack: [],\r\n                    all: []\r\n                },\r\n                offset = 0,\r\n                color = \"\";\r\n            offset = Math.floor(startColor / (count - 1));\r\n            for (var i = 0; i < count; i++) {\r\n                if (i == count - 1) {\r\n                    color = this.formatColor(endColor);\r\n                } else {\r\n                    color = this.formatColor(startColor - i * offset);\r\n                }\r\n                colors.whiteBack.push(color + color + color);\r\n            }\r\n            count = 9;\r\n            colorList = [\"ff,00,00\", \"ff,88,00\", \"ff,ff,00\", \"88,ff,00\", \"00,ff,00\", \"00,ff,88\", \"00,ff,ff\", \"00,88,ff\", \"00,00,ff\", \"88,00,ff\", \"ff,00,ff\", \"ff,00,88\"];\r\n            offset = parseInt(\"33\", 16);\r\n            for (var i = 1; i <= count; i++) {\r\n                colorList.forEach(function(value) {\r\n                    value = value.split(\",\");\r\n                    color = \"\";\r\n                    offset = parseInt(\"33\", 16) * (Math.ceil(count / 2) - i);\r\n                    value.forEach(function(item) {\r\n                        var num = parseInt(item, 16);\r\n                        if (num == 255 || num == 0) {\r\n                            color += self.formatColor(num + offset);\r\n                        } else {\r\n                            color += self.formatColor(num + parseInt(offset / 2));\r\n                        }\r\n                    });\r\n                    colors.all.push(color);\r\n                });\r\n            }\r\n            return colors;\r\n        },\r\n        createDom: function(colors) {\r\n            var whiteBackHtml = \"\",\r\n                allHtml = \"\",\r\n                html = \"\";\r\n            for (var i = 0, len = colors.whiteBack.length; i < len; i++) {\r\n                whiteBackHtml += \"<li class='color-\" + colors.whiteBack[i] + \"' style='background: #\" + colors.whiteBack[i] + \";' data-color='\" + colors.whiteBack[i] + \"'></li>\";\r\n            }\r\n            for (var i = 0, len = colors.all.length; i < len; i++) {\r\n                allHtml += \"<li class='color-\" + colors.all[i] + \"' style='background: #\" + colors.all[i] + \";' data-color='\" + colors.all[i] + \"'></li>\";\r\n            }\r\n            html = '<div class=\"common-popup-block color-picker\">\\\r\n                            <ul>' + whiteBackHtml + '</ul>\\\r\n                            <ul class=\"recommend-color\">' + allHtml + '</ul>\\\r\n                            <div class=\"color-info\">\\\r\n                                <label for=\"color\">#</label>\\\r\n                                <input id=\"color\" type=\"text\" value=\"\" maxlength=\"6\" />\\\r\n                                <span class=\"selected-color\"></span>\\\r\n                            </div>\\\r\n                        </div>';\r\n            $(\"body\").append(html);\r\n        },\r\n        markSelecteColor: function(color) {\r\n            var $popup = $(\".color-picker\");\r\n            $popup.find(\".color-\" + color).addClass(\"selected\");\r\n            $popup.find(\"#color\").val(color);\r\n            $popup.find(\".selected-color\").css(\"background\", \"#\" + color);\r\n        },\r\n        setPopupPos: function($target) {\r\n            var offset = $target.offset(),\r\n                height = $target.height(),\r\n                $popup = $(\".color-picker\"),\r\n                gap = 5;\r\n            $popup.css({\r\n                left: offset.left + \"px\",\r\n                top: offset.top + height + gap + \"px\"\r\n            });\r\n        },\r\n        clean: function() {\r\n            var $popup = $(\".color-picker\");\r\n            $popup.remove();\r\n            this.color = \"\";\r\n            this.triggerType = \"\";\r\n            $(document).off(\"click\", this.bindBodyClickEvent);\r\n        },\r\n        setEvent: function(callback) {\r\n            var self = this;\r\n            var $popup = $(\".color-picker\");\r\n            $popup.find(\"li\").hover(\r\n                function() {\r\n                    var $target = $(this),\r\n                        color = $target.attr(\"data-color\");\r\n                    $popup.find(\"#color\").val(color);\r\n                    $popup.find(\".selected-color\").css(\"background\", \"#\" + color);\r\n                },\r\n                function() {\r\n                    $popup.find(\"#color\").val(self.color);\r\n                    $popup.find(\".selected-color\").css(\"background\", \"#\" + self.color);\r\n                }\r\n            );\r\n            $popup.find(\"#color\").on(\"input\", function() {\r\n                var $target = $(this);\r\n                $popup.find(\".selected-color\").css(\"background\", \"#\" + $target.val());\r\n            });\r\n            $popup.find(\".selected-color, li\").on(\"click\", function() {\r\n                var color = $popup.find(\"#color\").val();\r\n                callback(color);\r\n                self.clean();\r\n            });\r\n            $(document).on(\"click\", self.bindBodyClickEvent);\r\n        },\r\n        bindBodyClickEvent: function(event) {\r\n            var $target = $(event.target);\r\n            if (ColorPicker.triggerType != \"triggerByTarget\" && !$target.hasClass(\"color-picker\") && !$target.parents(\".color-picker\").length) {\r\n                ColorPicker.clean();\r\n            }\r\n            ColorPicker.triggerType = \"\";\r\n        },\r\n        init: function($target, color, callback, triggerType) {\r\n            this.clean();\r\n            this.color = color;\r\n            this.triggerType = triggerType;\r\n            var colors = this.initColor();\r\n            this.createDom(colors);\r\n            this.setPopupPos($target);\r\n            this.markSelecteColor(color);\r\n            this.setEvent(callback);\r\n        }\r\n    }\r\n    return ColorPicker;\r\n});\n","define('popup-menu',[\"jquery\", \"utils\"], function($, Utils) {\r\n    var Menu = {\r\n        name: \"menu-popup\",\r\n        selector: \".menu-popup\",\r\n        createDom: function(data) {\r\n            var liHtml = \"\",\r\n                html = \"\",\r\n                className = data.type || \"\",\r\n                item;\r\n            for (var i = 0, len = data.menus.length; i < len; i++) {\r\n                item = data.menus[i];\r\n                if (item.type == \"separator\") {\r\n                    liHtml += '<li class=\"separator\"></li>';\r\n                } else {\r\n                    liHtml += '<li class=\"' + (item.operate || \"\") + ' ' + (item.status || \"\") + '\" data-text=\"' + (item.text || \"\") + '\" data-operate=\"' + (item.operate || \"\") + '\" data-value=\"' + (item.value || \"\") + '\"><i></i><span class=\"text\">' + (item.text || \"\") + '</span><span class=\"shortcut\">' + (item.shortcut || \"\") + '</span></li>';\r\n                }\r\n            }\r\n            html = '<div class=\"common-popup-block menu-popup ' + className + '\">\\\r\n                        <ul>' + liHtml + '</ul>\\\r\n                    </div>';\r\n            $(\"body\").append(html);\r\n        },\r\n        setPopupPos: function($target) {\r\n            var $popup = $(this.selector),\r\n                scrollLeft = $(window).scrollLeft(),\r\n                scrollTop = $(window).scrollTop();\r\n            if ($target instanceof $) {\r\n                var offset = $target.offset(),\r\n                    height = $target.height(),\r\n                    gap = 5;\r\n                $popup.css({\r\n                    left: offset.left + \"px\",\r\n                    top: offset.top + height + gap + \"px\"\r\n                });\r\n            } else if ($target.type == \"contextmenu\") {\r\n                $popup.css({\r\n                    left: $target.clientX + scrollLeft + \"px\",\r\n                    top: $target.clientY + scrollTop + \"px\"\r\n                });\r\n            } else {\r\n                $popup.css({\r\n                    left: $target.x + scrollLeft + \"px\",\r\n                    top: $target.y + scrollTop + \"px\"\r\n                });\r\n            }\r\n        },\r\n        clean: function() {\r\n            var $popup = $(this.selector);\r\n            $popup.remove();\r\n            this.triggerType = \"\";\r\n            $(document).off(\"click\", this.bindBodyClickEvent);\r\n        },\r\n        setEvent: function(callback) {\r\n            var self = this;\r\n            var $popup = $(this.selector);\r\n            $popup.find(\"li\").click(function() {\r\n                var $target = $(this),\r\n                    operate = $target.attr(\"data-operate\"),\r\n                    text = $target.attr(\"data-text\"),\r\n                    value = $target.attr(\"data-value\");\r\n                if ($target.hasClass(\"disabled\") || $target.hasClass(\"separator\")) {\r\n                    return;\r\n                }\r\n                callback({ operate: operate, value: value, text: text });\r\n                self.clean();\r\n            });\r\n            $(document).on(\"click\", self.bindBodyClickEvent);\r\n        },\r\n        bindBodyClickEvent: function(event) {\r\n            var $target = $(event.target);\r\n            if (Menu.triggerType != \"triggerByTarget\" && !$target.hasClass(Menu.name) && !$target.parents(Menu.selector).length) {\r\n                Menu.clean();\r\n            }\r\n            Menu.triggerType = \"\";\r\n        },\r\n        init: function($target, data, callback, triggerType) {\r\n            this.clean();\r\n            this.triggerType = triggerType;\r\n            this.createDom(data);\r\n            this.setPopupPos($target);\r\n            this.setEvent(callback);\r\n        }\r\n    };\r\n    return Menu;\r\n});\n","define('text-input',[\"jquery\", \"utils\"], function($, Utils) {\r\n    var TextInput = {\r\n        padding: {\r\n            top: 2,\r\n            left: 4\r\n        },\r\n        name: \"text-input-popup\",\r\n        selector: \".text-input-popup\",\r\n        createDom: function(data) {\r\n            var html = '<div class=\"text-input-popup\">\\\r\n                            <p class=\"text-input\" contenteditable=\"true\">' + Utils.encodeHtmlAndAttr(data.text || \"\") + '</p>\\\r\n                        </div>';\r\n            $(\"body\").append(html);\r\n            var $p = $(this.selector).find(\".text-input\"),\r\n                range = document.createRange(),\r\n                sel = window.getSelection();\r\n            range.selectNodeContents($p[0]);\r\n            sel.removeAllRanges();\r\n            sel.addRange(range);\r\n        },\r\n        setPopupPos: function(pos) {\r\n            var $popup = $(this.selector);\r\n            $popup.css({\r\n                left: pos.x - 1 + \"px\",\r\n                top: pos.y - 1 + \"px\"\r\n            });\r\n            $popup.find(\".text-input\").css({\r\n                \"padding\": this.padding.top + \"px \" + this.padding.left + \"px\",\r\n                \"min-height\": pos.height - this.padding.top * 2,\r\n                \"min-width\": pos.width - this.padding.left * 2\r\n            });\r\n        },\r\n        clean: function() {\r\n            var $popup = $(this.selector);\r\n            $popup.remove();\r\n            this.triggerType = \"\";\r\n            $(document).off(\"click\", this.bindBodyClickEvent);\r\n        },\r\n        setEvent: function(callback) {\r\n            var self = this;\r\n            var $popup = $(this.selector);\r\n\r\n            function submitText(event) {\r\n                if (event.type == \"keydown\" && event.keyCode != 13) {\r\n                    return;\r\n                }\r\n                var $target = $(event.target),\r\n                    text = $target.text();\r\n                callback({ text: text, width: $target.width() + self.padding.left * 2, height: $target.height() + self.padding.top * 2 });\r\n                self.clean();\r\n            }\r\n            $popup.find(\".text-input\").keydown(submitText);\r\n            $popup.find(\".text-input\").blur(submitText);\r\n            $(document).on(\"click\", self.bindBodyClickEvent);\r\n        },\r\n        bindBodyClickEvent: function(event) {\r\n            var $target = $(event.target);\r\n            if (TextInput.triggerType != \"triggerByTarget\" && !$target.hasClass(TextInput.name) && !$target.parents(TextInput.selector).length) {\r\n                TextInput.clean();\r\n            }\r\n            TextInput.triggerType = \"\";\r\n        },\r\n        init: function(pos, data, callback, triggerType) {\r\n            this.clean();\r\n            this.triggerType = triggerType;\r\n            this.createDom(data);\r\n            this.setPopupPos(pos);\r\n            this.setEvent(callback);\r\n        }\r\n    };\r\n    return TextInput;\r\n});\n","define('common',[\"layer\", \"utils\", \"color-picker\", \"popup-menu\", \"text-input\"], function(layer, utils, colorPicker, popupMenu, textInput) {\r\n    return {\r\n        layer: layer,\r\n        utils: utils,\r\n        colorPicker: colorPicker,\r\n        popupMenu: popupMenu,\r\n        textInput: textInput\r\n    }\r\n});\n","define('templates/attr-tpl',[],function() {\r\n    var html = '<% if (attrCategories.length) { %>\\\r\n                    <ul>\\\r\n                        <% _.each(attrCategories, function(category){ %>\\\r\n                            <li class=\"attrs <%= category.name %>\">\\\r\n                                <ul>\\\r\n                                    <% _.each(category.attrs, function(attr){ %>\\\r\n                                        <% if(([\"fontSize\", \"textColor\"]).indexOf(attr.name) != -1){ %>\\\r\n                                            <li class=\"separator\"></li>\\\r\n                                        <% } %>\\\r\n                                        <li class=\"<%= attr.className %>\" title=\"<%= attr.text %>\" data-attr=\"<%= attr.name %>\">\\\r\n                                            <% if (attr.name == \"scale\") { %>\\\r\n                                                <p class=\"text-input\"><i>页面比例: </i><input type=\"text\" value=\"<%= attr.value %>%\" maxlength=\"4\"></p>\\\r\n                                            <% } else if (attr.name == \"font\") { %>\\\r\n                                                <p class=\"text-show\"><%= attr.value %></p>\\\r\n                                            <% } else if (attr.name == \"fontSize\") { %>\\\r\n                                                <p class=\"text-input\"><input type=\"text\" value=\"<%= attr.value %>\" maxlength=\"2\"><i>px</i></p>\\\r\n                                                <div class=\"resize-font-size\">\\\r\n                                                    <span class=\"big-font-size\"></span>\\\r\n                                                    <span class=\"small-font-size\"></span>\\\r\n                                                </div>\\\r\n                                            <% } else if (attr.name == \"pos\") { %>\\\r\n                                                <p>\\\r\n                                                    <span>X: <i class=\"left\">123</i>px</span>\\\r\n                                                    <span>Y: <i class=\"top\">456</i>px</span>\\\r\n                                                </p>\\\r\n                                            <% } else if (attr.name == \"size\") { %>\\\r\n                                                <p>\\\r\n                                                    <span>W: <i class=\"width\">123</i>px</span>\\\r\n                                                    <span>H: <i class=\"height\">456</i>px</span>\\\r\n                                                </p>\\\r\n                                            <% } else { %>\\\r\n                                                <% if (attr.className.indexOf(\"has-value\")) { %>\\\r\n                                                    <p class=\"bg-icon\" style=\"border-bottom-color: #<%= attr.value %>;\"></p>\\\r\n                                                <% } else { %>\\\r\n                                                    <p class=\"bg-icon\"></p>\\\r\n                                                <% } %>\\\r\n                                            <% } %>\\\r\n                                        </li>\\\r\n                                    <% }) %>\\\r\n                                </ul>\\\r\n                            </li>\\\r\n                        <% }) %>\\\r\n                    </ul>\\\r\n                <% } %>';\r\n    return html;\r\n});\n","define('attrs',[\"jquery\", \"underscore\", \"backbone\", \"svg\", \"templates/attr-tpl\", \"common\"], function($, _, Backbone, SVG, tpl, C) {\r\n    var attrModel = Backbone.Model.extend({\r\n        defaults: function(){\r\n            return {\r\n                undo: {\r\n                    className: \"undo\",\r\n                    value: \"\",\r\n                    available: false,\r\n                    text: \"撤销\",\r\n                },\r\n                redo: {\r\n                    value: \"\",\r\n                    className: \"redo\",\r\n                    available: false,\r\n                    text: \"恢复\",\r\n                },\r\n                formatBrush: {\r\n                    className: \"format-brush\",\r\n                    value: \"\",\r\n                    available: false,\r\n                    text: \"格式刷\",\r\n                },\r\n                scale: {\r\n                    className: \"scale\",\r\n                    value: 0,\r\n                    default: 100,\r\n                    available: true,\r\n                    list: [\r\n                        200, 150, 125, 110, 100, 90, 75, 50, 25\r\n                    ],\r\n                    text: \"缩放\",\r\n                },\r\n                font: {\r\n                    className: \"font-family\",\r\n                    value: \"\",\r\n                    default: \"Microsoft Yahei\",\r\n                    list: [\r\n                        \"Helvetica Neue\",\r\n                        \"Helvetica\",\r\n                        \"Arial\",\r\n                        \"PingFang SC\",\r\n                        \"Hiragino Sans GB\",\r\n                        \"WenQuanYi Micro Hei\",\r\n                        \"Microsoft Yahei\",\r\n                        \"sans-serif\"\r\n                    ],\r\n                    available: false,\r\n                    text: \"字体\",\r\n                },\r\n                fontSize: {\r\n                    className: \"font-size\",\r\n                    value: 0,\r\n                    default: 14,\r\n                    available: false,\r\n                    text: \"字体大小\",\r\n                    max: 72,\r\n                    min: 10\r\n                },\r\n                textColor: {\r\n                    className: \"color\",\r\n                    value: \"\",\r\n                    default: \"333\",\r\n                    available: false,\r\n                    text: \"字体颜色\",\r\n                },\r\n                textBold: {\r\n                    className: \"bold\",\r\n                    value: \"\",\r\n                    available: false,\r\n                    text: \"加粗\",\r\n                },\r\n                textItalic: {\r\n                    className: \"italic\",\r\n                    value: \"\",\r\n                    available: false,\r\n                    text: \"斜体\",\r\n                },\r\n                arrange: {\r\n                    value: \"\",\r\n                    list: [\r\n                        {value: \"arrange-left\", text: \"左对齐\"},\r\n                        {value: \"arrange-right\", text: \"右对齐\"},\r\n                        {value: \"arrange-top\", text: \"顶对齐\"},\r\n                        {value: \"arrange-bottom\", text: \"底对齐\"},\r\n                        {value: \"arrange-center\", text: \"水平居中\"},\r\n                        {value: \"arrange-middle\", text: \"垂直居中\"},\r\n                        {value: \"arrange-center-middle\", text: \"水平垂直居中\"},\r\n                        {value: \"arrange-h\", text: \"水平分布\"},\r\n                        {value: \"arrange-v\", text: \"垂直分布\"}\r\n                    ],\r\n                    className: \"arrange-left\",\r\n                    default: \"arrange-left\",\r\n                    available: false,\r\n                    text: \"对齐\",\r\n                },\r\n                fillColor: {\r\n                    className: \"fill-color\",\r\n                    value: \"\",\r\n                    default: \"fff\",\r\n                    available: false,\r\n                    text: \"填充色\",\r\n                },\r\n                borderColor: {\r\n                    className: \"stroke-color\",\r\n                    value: \"\",\r\n                    default: \"666\",\r\n                    available: false,\r\n                    text: \"边框色\",\r\n                },\r\n                borderStyle: {\r\n                    className: \"border-style\",\r\n                    value: \"\",\r\n                    default: \"solid\",\r\n                    list: [\r\n                        { value: \"solid\", text: \"\"},\r\n                        { value: \"dashed\", text: \"\"},\r\n                        { value: \"dot\", text: \"\"}\r\n                    ],\r\n                    available: false,\r\n                    text: \"边框类型\",\r\n                },\r\n                borderWidth: {\r\n                    className: \"border-width\",\r\n                    value: \"\",\r\n                    list: [\r\n                        1, 2, 3, 4, 5, 6, 8, 10\r\n                    ],\r\n                    default: 1,\r\n                    available: false,\r\n                    text: \"边框宽度\",\r\n                },\r\n                startArrow: {\r\n                    className: \"line-start\",\r\n                    value: \"\",\r\n                    list: [\r\n                        { value: \"line-no-arrow\", text: \"直线\"},\r\n                        { value: \"line-with-arrow\", text: \"实心箭头\"}\r\n                    ],\r\n                    default: \"line-no-arrow\",\r\n                    available: false,\r\n                    text: \"起点类型\",\r\n                },\r\n                endArrow: {\r\n                    className: \"line-end\",\r\n                    default: \"line-with-arrow\",\r\n                    value: \"\",\r\n                    list: [\r\n                        { value: \"line-no-arrow\", text: \"直线\"},\r\n                        { value: \"line-with-arrow\", text: \"实心箭头\"}\r\n                    ],\r\n                    available: false,\r\n                    text: \"终点类型\",\r\n                },\r\n                moveUp: {\r\n                    className: \"move-up\",\r\n                    value: \"\",\r\n                    available: false,\r\n                    text: \"上移一层\",\r\n                },\r\n                moveDown: {\r\n                    className: \"move-down\",\r\n                    value: \"\",\r\n                    available: false,\r\n                    text: \"下移一层\",\r\n                },\r\n                copy: {\r\n                    className: \"copy\",\r\n                    value: \"\",\r\n                    available: false,\r\n                    text: \"复制\",\r\n                },\r\n                cut: {\r\n                    className: \"cut\",\r\n                    value: \"\",\r\n                    available: false,\r\n                    text: \"剪切\",\r\n                },\r\n                paste: {\r\n                    className: \"paste\",\r\n                    value: \"\",\r\n                    available: false,\r\n                    text: \"粘贴\",\r\n                },\r\n                delete: {\r\n                    className: \"delete\",\r\n                    value: \"\",\r\n                    available: false,\r\n                    text: \"删除\",\r\n                },\r\n                pos: {\r\n                    className: \"offset\",\r\n                    x: \"\",\r\n                    y: \"\",\r\n                    available: false,\r\n                },\r\n                size: {\r\n                    className: \"size\",\r\n                    h: \"\",\r\n                    w: \"\",\r\n                    available: false\r\n                },\r\n                viewId: 0,\r\n            };\r\n        },\r\n        sync: function(mothod, model, options) {\r\n            model.set(\"id\", model.cid);\r\n            options.success({});\r\n        },\r\n    });\r\n    var attrView = Backbone.View.extend({\r\n        commonAttrs: [\r\n            \"redo\", \"undo\", \"formatBrush\", \"scale\", \"moveUp\", \"moveDown\", \"copy\", \"cut\", \"paste\", \"delete\", \"pos\", \"size\"\r\n        ],\r\n        selectedAttrs: [\r\n            \"formatBrush\", \"moveUp\", \"moveDown\", \"copy\", \"cut\", \"delete\"\r\n        ],\r\n        svgElemDisabledAttrs: {\r\n            line: [\"font\", \"fontSize\", \"textColor\", \"textBold\", \"textItalic\", \"arrange\", \"fillColor\", \"size\"],\r\n            rect: [\"startArrow\", \"endArrow\"],\r\n            device: [\"fillColor\", \"borderColor\", \"borderStyle\", \"borderWidth\", \"startArrow\", \"endArrow\"]\r\n        },\r\n        categories: [{\r\n                name: \"recovery\",\r\n                attrs: [\"undo\", \"redo\", \"formatBrush\", \"scale\"]\r\n            },\r\n            {\r\n                name: \"font\",\r\n                attrs: [\"font\", \"fontSize\", \"textColor\", \"textBold\", \"textItalic\", \"arrange\"]\r\n            },\r\n            {\r\n                name: \"format\",\r\n                attrs: [\"fillColor\", \"borderColor\", \"borderWidth\", \"borderStyle\", \"startArrow\", \"endArrow\"]\r\n            },\r\n            {\r\n                name: \"cascade\",\r\n                attrs: [\"moveUp\", \"moveDown\"]\r\n            },\r\n            {\r\n                name: \"copy-paste\",\r\n                attrs: [\"copy\", \"paste\", \"cut\", \"delete\"]\r\n            },\r\n            {\r\n                name: \"pos\",\r\n                attrs: [\"pos\", \"size\"]\r\n            }\r\n        ],\r\n        tagName: \"div\",\r\n        className: \"top-attrs\",\r\n        initialize: function() {\r\n            var self = this;\r\n\r\n            this.listenTo(this.model, \"sync\", this.render);\r\n            this.on({\r\n                \"showTypeAttr\": this.showTypeAttr\r\n            }, this);\r\n        },\r\n        template: _.template(tpl),\r\n        getAttrClassName: function(attr, attrData) {\r\n            var className = [];\r\n            if (typeof attrData == \"undefined\") {\r\n                var modelData = this.model.toJSON();\r\n                attrData = modelData[attr];\r\n            }\r\n            if (attrData) {\r\n                className.push(attrData.available ? \"enable\" : \"disabled\");\r\n                if (attrData.list) {\r\n                    className.push(\"with-arrow\");\r\n                }\r\n                if (([\"textColor\", \"fillColor\", \"borderColor\"]).indexOf(attr) != -1) {\r\n                    className.push(\"has-value with-arrow\");\r\n                }\r\n                if (attr == \"fontSize\") {\r\n                    className.push(\"no-padding\");\r\n                } else if (attr == \"startArrow\" || attr == \"endArrow\") {\r\n                    className.push(attrData.value || attrData.default);\r\n                }\r\n                className.push(attrData.className);\r\n            }\r\n            return className.join(\" \");\r\n        },\r\n        formatData: function() {\r\n            var self = this,\r\n                modelData = this.model.toJSON(),\r\n                data = [];\r\n            this.categories.forEach(function(item) {\r\n                var category = {\r\n                    name: item.name,\r\n                    attrs: []\r\n                };\r\n                item.attrs.forEach(function(attr) {\r\n                    var attrData = modelData[attr],\r\n                        data = null;\r\n                    if (attrData) {\r\n                        data = {\r\n                            text: attrData.text,\r\n                            name: attr,\r\n                            value: attrData.value || attrData.default,\r\n                            className: self.getAttrClassName(attr, attrData)\r\n                        };\r\n                        category.attrs.push(data);\r\n                    }\r\n                });\r\n                if (category.attrs.length) {\r\n                    data.push(category);\r\n                }\r\n            });\r\n            return {attrCategories: data};\r\n        },\r\n        render: function() {\r\n            this.$el.html(this.template(this.formatData()));\r\n            return this;\r\n        },\r\n        events: {\r\n            \"click .attrs li\": \"showAttrItems\",\r\n\r\n            \"keydown .scale input\": \"manualSetScale\",\r\n            \"focus .scale input\": \"manualSetScale\",\r\n\r\n            \"click .font-size span\": \"modifyFontSize\",\r\n            \"keydown .font-size input\": \"manualSetFontSize\",\r\n            \"focus .font-size input\": \"manualSetFontSize\",\r\n        },\r\n\r\n        // events\r\n        showTypeAttr: function(options){\r\n            var self = this;\r\n            options = options || {};\r\n            if (!Array.isArray(options.types) || !options.types.length) {\r\n                this.model.save(this.model.defaults());\r\n                return;\r\n            }\r\n            var self = this,\r\n                disabledAttr = [],\r\n                modelData = this.model.toJSON();\r\n            options.types.forEach(function(type, index){\r\n                var attrs = self.svgElemDisabledAttrs[type] || [];\r\n                if (index != 0) {\r\n                    disabledAttr = _.intersection(disabledAttr, attrs);\r\n                } else {\r\n                    disabledAttr = attrs;\r\n                }\r\n            });\r\n            _.each(modelData, function(attr, key){\r\n                if (disabledAttr.indexOf(key) != -1) {\r\n                    attr.available = false;\r\n                    attr.value = \"\";\r\n                } else if (self.selectedAttrs.indexOf(key) != -1) {\r\n                    attr.available = true;\r\n                } else if (self.commonAttrs.indexOf(key) == -1) {\r\n                    attr.available = true;\r\n                }\r\n            });\r\n            this.model.save(modelData);\r\n        },\r\n        setAttr: function(options) {\r\n            var attr = this.model.get(options.name),\r\n                data = {},\r\n                value = options.value;\r\n            if (options.check) {\r\n                value = this[options.check](options.value);\r\n            }\r\n            attr.value = value;\r\n            data[options.name] = attr;\r\n            this.model.save(attr);\r\n            Backbone.trigger(\"set\" + options.name[0].toUpperCase() + options.name.slice(1), { value: value });\r\n        },\r\n        getProperFontSizeValue: function(value){\r\n            var fontSize = this.model.get(\"fontSize\"),\r\n                value = parseInt(value, 10);\r\n            if (!value) {\r\n                value = fontSize.default;\r\n            } else if (value <fontSize.min) {\r\n                value = fontSize.min;\r\n            } else if (value > fontSize.max) {\r\n                value = fontSize.max;\r\n            }\r\n            return value;\r\n        },\r\n        manualSetFontSize: function(event) {\r\n            if (event.type == \"focus\" || event.type == \"focusin\") {\r\n                event.target.select();\r\n            } else if (event.keyCode == 13) {\r\n                var value = event.target.value;\r\n                this.setAttr({\r\n                    name: \"fontSize\",\r\n                    value: value,\r\n                    check: \"getProperFontSizeValue\"\r\n                });\r\n                event.target.blur();\r\n            }\r\n        },\r\n        modifyFontSize: function(event){\r\n            var fontSize = this.model.get(\"fontSize\"),\r\n                $target = $(event.target),\r\n                value = fontSize.value || fontSize.default;\r\n            if ($target.hasClass(\"big-font-size\")) {\r\n                value += 1;\r\n            } else {\r\n                value -= 1;\r\n            }\r\n            this.setAttr({\r\n                name: \"fontSize\",\r\n                value: value,\r\n                check: \"getProperFontSizeValue\"\r\n            });\r\n        },\r\n        getProperScaleValue: function(value){\r\n            var scale = this.model.get(\"scale\"),\r\n                value = parseInt(value);\r\n            if (!value) {\r\n                value = scale.default;\r\n            }\r\n            if (value > scale.list[0]) {\r\n                value = scale.list[0];\r\n            } else if (value < scale.list[scale.list.length - 1]) {\r\n                value = scale.list[scale.list.length - 1];\r\n            }\r\n            return value;\r\n        },\r\n        manualSetScale: function(event){\r\n            if (event.type == \"focus\" || event.type == \"focusin\") {\r\n                event.target.select();\r\n            } else if (event.keyCode == 13) {\r\n                var value = event.target.value;\r\n                this.setAttr({\r\n                    name: \"scale\",\r\n                    value: value,\r\n                    check: \"getProperScaleValue\"\r\n                });\r\n                event.target.blur();\r\n            }\r\n        },\r\n        showScaleItems: function($target){\r\n            var self = this,\r\n                scale = this.model.get(\"scale\"),\r\n                data = {\r\n                    type: \"with-selected no-icon\",\r\n                    menus: []\r\n                };\r\n            scale.list.forEach(function(item){\r\n                var isSelected = false,\r\n                    selectedValue = scale.value || scale.default;\r\n                if (item == selectedValue) {\r\n                    isSelected = true;\r\n                }\r\n                data.menus.push({\r\n                    operate: \"setScale\",\r\n                    status: isSelected ? \"selected\" : \"\",\r\n                    value: item,\r\n                    text: item + \"%\",\r\n                    shortcut: \"\"\r\n                });\r\n            });\r\n            C.popupMenu.init($target, data, function(data){\r\n                self.setAttr({\r\n                    name: \"scale\",\r\n                    value: data.value,\r\n                    check: \"getProperScaleValue\"\r\n                });\r\n            }, \"triggerByTarget\");\r\n        },\r\n        showFontItems: function($target){\r\n            var self = this,\r\n            font = this.model.get(\"font\"),\r\n            data = {\r\n                type: \"with-selected no-icon\",\r\n                menus: []\r\n            };\r\n            font.list.forEach(function(item){\r\n                var isSelected = false,\r\n                    selectedValue = font.value || font.default;\r\n                if (item == selectedValue) {\r\n                    isSelected = true;\r\n                }\r\n                data.menus.push({\r\n                    operate: \"setFont\",\r\n                    status: isSelected ? \"selected\" : \"\",\r\n                    value: item,\r\n                    text: item,\r\n                    shortcut: \"\"\r\n                });\r\n            });\r\n            C.popupMenu.init($target, data, function(data){\r\n                self.setAttr({ name: \"font\", value: data.value });\r\n            }, \"triggerByTarget\"); \r\n        },\r\n        showColorItems: function($target, attr){\r\n            var self = this,\r\n                color = this.model.get(attr),\r\n                value = color.value || color.default;\r\n            C.colorPicker.init($target, value, function(color) {\r\n                self.setAttr({ name: attr, value: color });\r\n            }, \"triggerByTarget\");\r\n        },\r\n        showLineArrowItems: function($target, attrName){\r\n            var self = this,\r\n                attr = this.model.get(attrName),\r\n                data = {\r\n                    type: \"with-selected \" + attr.className,\r\n                    menus: []\r\n                };\r\n            attr.list.forEach(function(item){\r\n                var isSelected = false,\r\n                    selectedValue = attr.value || attr.default;\r\n                if (item.value == selectedValue) {\r\n                    isSelected = true;\r\n                }\r\n                data.menus.push({\r\n                    operate: item.value,\r\n                    status: isSelected ? \"selected\" : \"\",\r\n                    value: item.value,\r\n                    text: item.text,\r\n                    shortcut: \"\"\r\n                });\r\n            });\r\n            C.popupMenu.init($target, data, function(data){\r\n                self.setAttr({ name: attrName, value: data.value });\r\n            }, \"triggerByTarget\");\r\n        },\r\n        showBorderWidthItems: function($target){\r\n            var self = this,\r\n            attr = this.model.get(\"borderWidth\"),\r\n            data = {\r\n                type: \"with-selected no-icon\",\r\n                menus: []\r\n            };\r\n            attr.list.forEach(function(item){\r\n                var isSelected = false,\r\n                    selectedValue = attr.value || attr.default;\r\n                if (item == selectedValue) {\r\n                    isSelected = true;\r\n                }\r\n                data.menus.push({\r\n                    operate: \"setBorderWidth\",\r\n                    status: isSelected ? \"selected\" : \"\",\r\n                    value: item,\r\n                    text: item + \"px\",\r\n                    shortcut: \"\"\r\n                });\r\n            });\r\n            C.popupMenu.init($target, data, function(data){\r\n                self.setAttr({ name: \"borderWidth\", value: data.value });\r\n            }, \"triggerByTarget\");\r\n        },\r\n        showBorderStyleItems: function($target){\r\n            var self = this,\r\n            attr = this.model.get(\"borderStyle\"),\r\n            data = {\r\n                type: \"with-selected no-icon set-border-style\",\r\n                menus: []\r\n            };\r\n            attr.list.forEach(function(item){\r\n                var isSelected = false,\r\n                    selectedValue = attr.value || attr.default;\r\n                if (item.value == selectedValue) {\r\n                    isSelected = true;\r\n                }\r\n                data.menus.push({\r\n                    operate: \"setBorderStyle\",\r\n                    status: isSelected ? \"selected\" : \"\",\r\n                    value: item.value,\r\n                    text: item.text,\r\n                    shortcut: \"\"\r\n                });\r\n            });\r\n            C.popupMenu.init($target, data, function(data){\r\n                self.setAttr({ name: \"borderStyle\", value: data.value });\r\n            }, \"triggerByTarget\");\r\n        },\r\n        showArrangeItems: function($target){\r\n            var self = this,\r\n            attr = this.model.get(\"arrange\"),\r\n            data = {\r\n                type: \"with-selected no-icon\",\r\n                menus: []\r\n            };\r\n            attr.list.forEach(function(item){\r\n                var isSelected = false,\r\n                    selectedValue = attr.value || attr.default;\r\n                if (item.value == selectedValue) {\r\n                    isSelected = true;\r\n                }\r\n                data.menus.push({\r\n                    operate: \"setArrange\",\r\n                    status: isSelected ? \"selected\" : \"\",\r\n                    value: item.value,\r\n                    text: item.text,\r\n                    shortcut: \"\"\r\n                });\r\n            });\r\n            C.popupMenu.init($target, data, function(data){\r\n                self.setAttr({ name: \"arrange\", value: data.value });\r\n            }, \"triggerByTarget\");\r\n        },\r\n        showAttrItems: function(event){\r\n            var $target = $(event.currentTarget),\r\n                attr = $target.attr(\"data-attr\");\r\n            if ($target.hasClass(\"disabled\")) {\r\n                return;\r\n            }\r\n            if (attr == \"scale\") {\r\n                if (event.target.nodeName != \"INPUT\") {\r\n                    this.showScaleItems($target);\r\n                }\r\n            } else if (attr == \"font\"){\r\n                this.showFontItems($target);\r\n            } else if (([\"textColor\", \"fillColor\", \"borderColor\"]).indexOf(attr) != -1){\r\n                this.showColorItems($target, attr);\r\n            } else if (attr == \"startArrow\" || attr == \"endArrow\"){\r\n                this.showLineArrowItems($target, attr);\r\n            } else if (attr == \"borderStyle\"){\r\n                this.showBorderStyleItems($target);\r\n            } else if (attr == \"borderWidth\"){\r\n                this.showBorderWidthItems($target);\r\n            } else if (attr == \"arrange\"){\r\n                this.showArrangeItems($target);\r\n            } else {\r\n            }\r\n        },\r\n    });\r\n\r\n    return {\r\n        view: attrView,\r\n        model: attrModel\r\n    }\r\n});\n","define('templates/tool-tpl',[],function() {\r\n    var html = '<% if (tools.length) { %>\\\r\n                    <ul>\\\r\n                        <% _.each(tools, function(item){ %>\\\r\n                            <li class=\"<%- item.type %>\" draggable=\"false\" data-type=\"<%- item.type %>\">\\\r\n                                <p title=\"<%- item.name %>\"></p>\\\r\n                            </li>\\\r\n                        <% }); %>\\\r\n                    </ul>\\\r\n                <% } %>';\r\n    return html;\r\n});\n","define('tools',[\"jquery\", \"underscore\", \"backbone\", \"svg\", \"templates/tool-tpl\"], function($, _, Backbone, SVG, tpl) {\r\n    var toolModel = Backbone.Model.extend({\r\n        defaults: {\r\n            tools: []\r\n        }\r\n    });\r\n    var toolView = Backbone.View.extend({\r\n        preventBodyClear: false,\r\n        type: \"tool\",\r\n        tagName: \"div\",\r\n        className: \"left-tools\",\r\n        initialize: function(data) {\r\n            var self = this;\r\n            this.model.set({ tools: data.tools });\r\n            this.on({\r\n                \"selectDone\": this.clearItemSelected,\r\n                \"setSelected\": this.selectTool\r\n            }, this);\r\n        },\r\n        template: _.template(tpl),\r\n        render: function() {\r\n            this.$el.html(this.template(this.model.toJSON()));\r\n            return this;\r\n        },\r\n        // events\r\n        selectTool: function(options) {\r\n            var $target = $(options.event.target),\r\n                type = \"\";\r\n            if ($target.parents(\"li\").length) {\r\n                $target = $target.parents(\"li\");\r\n            } else if ($target[0].tagName == \"li\"){\r\n                // just the tool\r\n            } else { // not click on tool\r\n                return ;\r\n            }\r\n            type = $target.attr(\"data-type\");\r\n            this.clearItemSelected();\r\n            $target.addClass(\"selected\");\r\n            this.trigger(\"selectTool\", { type: this.type, value: type });\r\n        },\r\n        clearItemSelected: function() {\r\n            var $target = this.$el.find(\"li\");\r\n            $target.removeClass(\"selected\");\r\n        },\r\n        getSelected: function() {\r\n            return this.$el.find(\"li.selected\");\r\n        },\r\n    });\r\n\r\n    return {\r\n        view: toolView,\r\n        model: toolModel\r\n    };\r\n});\n","define('templates/device-tpl',[],function() {\r\n    var html = '<% if (devices.length) { %>\\\r\n                    <ul>\\\r\n                        <% _.each(devices, function(item){ %>\\\r\n                            <li draggable=\"false\" data-type=\"<%- item.type %>\">\\\r\n                                <img draggable=\"false\" src=\"<%= item.src %>\">\\\r\n                                <p><%- item.name %></p>\\\r\n                            </li>\\\r\n                        <% }); %>\\\r\n                    </ul>\\\r\n                <% } %>';\r\n    return html;\r\n});\n","define('devices',[\"jquery\", \"underscore\", \"backbone\", \"svg\", \"templates/device-tpl\", \"common\"], function($, _, Backbone, SVG, tpl, C) {\r\n    var deviceModel = Backbone.Model.extend({\r\n        defaults: {\r\n            devices: []\r\n        }\r\n    });\r\n    var deviceView = Backbone.View.extend({\r\n        preventBodyClear: false,\r\n        type: \"device\",\r\n        tagName: \"div\",\r\n        className: \"bottom-icons\",\r\n        initialize: function(data) {\r\n            var self = this;\r\n            this.model.set({ devices: data.devices });\r\n            this.on({\r\n                \"selectDone\": this.clearItemSelected,\r\n                \"setSelected\": this.selectDevice\r\n            }, this);\r\n\r\n            this.listenTo(Backbone, \"showDeviceIdList\", this.showDeviceIdList);\r\n            this.listenTo(Backbone, \"updateDeviceIdStatus\", this.updateDeviceIdStatus);\r\n        },\r\n        template: _.template(tpl),\r\n        render: function() {\r\n            this.$el.html(this.template(this.model.toJSON()));\r\n            return this;\r\n        },\r\n        // events\r\n        selectDevice: function(options) {\r\n            var $target = $(options.event.target),\r\n                type = \"\";\r\n            if ($target.parents(\"li\").length) {\r\n                $target = $target.parents(\"li\");\r\n            } else if ($target[0].tagName == \"li\"){\r\n                // just the device\r\n            } else { // not click on device\r\n                return ;\r\n            }\r\n            type = $target.attr(\"data-type\");\r\n            if ($target.hasClass(\"selected\")) {\r\n                return;\r\n            }\r\n            this.clearItemSelected();\r\n            $target.addClass(\"selected\");\r\n            this.trigger(\"selectDevice\", { type: this.type, value: type });\r\n        },\r\n        clearItemSelected: function() {\r\n            var $target = this.$el.find(\"li\");\r\n            $target.removeClass(\"selected\");\r\n        },\r\n        getSelected: function() {\r\n            return this.$el.find(\"li.selected\");\r\n        },\r\n        getAvailableList: function(type) {\r\n            var devices = this.model.get(\"devices\"),\r\n                idList = [],\r\n                availables = [];\r\n            for (var i = 0, len = devices.length; i < len; i++) {\r\n                if (devices[i].type == type) {\r\n                    idList = devices[i].devices;\r\n                }\r\n            }\r\n            for (var i = 0, len = idList.length; i < len; i++) {\r\n                if (idList[i].available) {\r\n                    availables.push(idList[i]);\r\n                }\r\n            }\r\n            return availables;\r\n        },\r\n\r\n        setDeviceIdStatus: function(type, id, status) {\r\n            var devices = this.model.get(\"devices\"),\r\n                idList = [],\r\n                availables = [];\r\n            for (var i = 0, len = devices.length; i < len; i++) {\r\n                if (devices[i].type == type) {\r\n                    idList = devices[i].devices;\r\n                }\r\n            }\r\n            for (var i = 0, len = idList.length; i < len; i++) {\r\n                if (idList[i].id == id) {\r\n                    idList[i].available = status;\r\n                }\r\n            }\r\n            this.model.set(\"devices\", devices);\r\n        },\r\n        updateDeviceIdStatus: function(options) {\r\n            this.setDeviceIdStatus(options.type, options.id, options.status);\r\n        },\r\n\r\n        showDeviceIdList: function(data) {\r\n            var availables = this.getAvailableList(data.type),\r\n                listData = [],\r\n                self = this;\r\n            if (!availables.length) {\r\n                C.layer.topNotify(\"error\", { content: \"该类设备下已经没有设备可以绑定\", shade: false, time: 2 });\r\n                return;\r\n            }\r\n            for (var i = 0, len = availables.length; i < len; i++) {\r\n                listData.push({\r\n                    operate: \"setId\",\r\n                    value: availables[i].id,\r\n                    text: availables[i].name\r\n                });\r\n            }\r\n            C.popupMenu.init(data.pos, { menus: listData }, function(menu) {\r\n                self.setDeviceIdStatus(data.type, menu.value, false);\r\n                Backbone.trigger(menu.operate, { deviceId: menu.value, deviceName: menu.text, viewId: data.id });\r\n            });\r\n        },\r\n    });\r\n\r\n    return {\r\n        view: deviceView,\r\n        model: deviceModel\r\n    };\r\n});\n","define('view',[\"jquery\", \"underscore\", \"backbone\", \"svg\", \"common\"], function($, _, Backbone, SVG, C) {\r\n    var BaseView = Backbone.View.extend({\r\n        domToSvgPos: function(pos) {\r\n            var svgDoc = this.getSvgRoot(),\r\n                $main = this.getMainContainerElem(),\r\n                offset = $(svgDoc.node).offset(),\r\n                docScrollTop = $(window).scrollTop(),\r\n                docScrollLeft = $(window).scrollLeft(),\r\n                scrollTop = $main.scrollTop() + docScrollTop,\r\n                scrollLeft = $main.scrollLeft() + docScrollLeft;\r\n            return {\r\n                x: pos.x - offset.left + scrollLeft,\r\n                y: pos.y - offset.top + scrollTop\r\n            };\r\n        },\r\n\r\n        getSvgRoot: function(isSvgNode) {\r\n            return this.svg.doc();\r\n        },\r\n        getMainContainerElem: function() {\r\n            return $(this.svg.node).parents(\".draw-container\");\r\n        },\r\n\r\n        getMousePos: function(event) {\r\n            var x = event.clientX,\r\n                y = event.clientY;\r\n            return this.domToSvgPos({\r\n                x: x,\r\n                y: y\r\n            });\r\n        },\r\n    });\r\n    var View = BaseView.extend({\r\n        initialize: function(data) {\r\n            this.baseSvg = data.svg;\r\n            this.svg = null;\r\n\r\n            this.listenTo(this.model, \"change\", this.render);\r\n            this.listenTo(this.model, \"destroy\", this.remove);\r\n            this.id = data.viewId || 0;\r\n\r\n            this.listenTo(Backbone, \"setFont\", this.setFont);\r\n            this.listenTo(Backbone, \"setFontSize\", this.setFontSize);\r\n            this.listenTo(Backbone, \"setTextColor\", this.setTextColor);\r\n\r\n            this.listenTo(Backbone, \"setFillColor\", this.setFillColor);\r\n\r\n            this.listenTo(Backbone, \"setBorderColor\", this.setBorderColor);\r\n            this.listenTo(Backbone, \"setBorderWidth\", this.setBorderWidth);\r\n            this.listenTo(Backbone, \"setBorderStyle\", this.setBorderStyle);\r\n\r\n            this.listenTo(Backbone, \"setStartArrow\", this.setLinePoint);\r\n            this.listenTo(Backbone, \"setEndArrow\", this.setLinePoint);\r\n\r\n            this.listenTo(Backbone, \"setArrange\", this.setArrange);\r\n\r\n            this.on({\r\n                \"setSelected\": this.selectedView,\r\n                \"removeSelected\": this.removeSelected\r\n            }, this);\r\n\r\n            this.init(data);\r\n        },\r\n        init: function() {},\r\n        setSvgText: function(text, svg) {\r\n            var padding = {\r\n                    top: 2,\r\n                    left: 4\r\n                },\r\n                boxWidth = svg.bbox().width,\r\n                svgText = svg.text(\"\"),\r\n                svgTspan = null,\r\n                textBox = null,\r\n                lineText = [],\r\n                str = \"\",\r\n                lastStr = \"\",\r\n                dy = 0;\r\n            for (var i = 0, len = text.length; i < len; i++) {\r\n                lastStr = str;\r\n                str += text[i];\r\n                svgText.tspan(str);\r\n                textBox = svgText.bbox();\r\n                if (textBox.width + padding.left * 2 > boxWidth) {\r\n                    lineText.push({ text: lastStr, dy: dy });\r\n                    dy = textBox.height;\r\n                    str = text[i];\r\n                    svgText.tspan(str);\r\n                }\r\n            }\r\n            if (str) {\r\n                lineText.push({ text: str, dy: dy });\r\n            }\r\n            svgText.remove();\r\n            svgText = svg.text(function(add) {\r\n                lineText.forEach(function(item) {\r\n                    add.tspan(item.text).newLine();\r\n                });\r\n            });\r\n            return svgText;\r\n        },\r\n\r\n        getDefaultStyle: function() {},\r\n        getCurrentStyle: function() {},\r\n        setStyle: function() {},\r\n\r\n        setFont: function(options){\r\n            C.layer.topNotify(\"info\", {content: \"set font \" + options.value, shade: false, time: 2});\r\n        },\r\n        setFontSize: function(options){\r\n            C.layer.topNotify(\"info\", {content: \"set font size\" + options.value + \"px\", shade: false, time: 2});\r\n        },\r\n\r\n        setTextColor: function(options){\r\n            C.layer.topNotify(\"info\", {content: \"set text color #\" + options.value, shade: false, time: 2});\r\n        },\r\n        setFillColor: function(options){\r\n            C.layer.topNotify(\"info\", {content: \"set fill color #\" + options.value, shade: false, time: 2});\r\n        },\r\n        setBorderColor: function(options){\r\n            C.layer.topNotify(\"info\", {content: \"set border color #\" + options.value, shade: false, time: 2});\r\n        },\r\n        setLinePoint: function(options){\r\n            C.layer.topNotify(\"info\", {content: \"set line point \" + options.value, shade: false, time: 2});\r\n        },\r\n        setBorderWidth: function(options){\r\n            C.layer.topNotify(\"info\", {content: \"set border width\" + options.value, shade: false, time: 2});\r\n        },\r\n        setBorderStyle: function(options){\r\n            C.layer.topNotify(\"info\", {content: \"set border style \" + options.value, shade: false, time: 2});\r\n        },\r\n\r\n        setArrange: function(options){\r\n            C.layer.topNotify(\"info\", {content: \"set arrange \" + options.value, shade: false, time: 2});\r\n        },\r\n\r\n        createBorder: function(positionGroup, isShow){\r\n            var padding = 0,\r\n                corderWidth = 6,\r\n                box = positionGroup.bbox(),\r\n                group = this.svg.group().addClass(\"svg-group-border\"),\r\n                centerPoints = [\r\n                    box,\r\n                    {cx: box.cx - box.width/2 - padding, cy: box.cy - box.height/2 - padding, width: corderWidth, height: corderWidth},\r\n                    {cx: box.cx + box.width/2 + padding, cy: box.cy - box.height/2 - padding, width: corderWidth, height: corderWidth},\r\n                    {cx: box.cx + box.width/2 + padding, cy: box.cy + box.height/2 + padding, width: corderWidth, height: corderWidth},\r\n                    {cx: box.cx - box.width/2 - padding, cy: box.cy + box.height/2 + padding, width: corderWidth, height: corderWidth},\r\n                ],\r\n                path = null;\r\n            if (!isShow) {\r\n                group.addClass(\"dsn\");\r\n            }\r\n            group.back();\r\n            this.borderGroup = group;\r\n            for (var i = 0, len = centerPoints.length; i < len; i ++) {\r\n                box = centerPoints[i];\r\n                path = group.path(\r\n                    \"M \" + (box.cx - box.width/2) + \" \" + (box.cy - box.height/2) +\r\n                    \"L \" + (box.cx + box.width/2) + \" \" + (box.cy - box.height/2) +\r\n                    \"L \" + (box.cx + box.width/2) + \" \" + (box.cy + box.height/2) +\r\n                    \"L \" + (box.cx - box.width/2) + \" \" + (box.cy + box.height/2) +\r\n                    \"Z\"\r\n                );\r\n                path.stroke({ color: \"#60f\"})\r\n                    .fill(\"#fff\");\r\n                if (i != 0) {\r\n                    path.addClass(\"svg-border-corner\").attr(\"data-order\", i);\r\n                    if (i % 2 == 1) {\r\n                        path.addClass(\"svg-border-corner svg-cursor-nwse\");\r\n                    } else {\r\n                        path.addClass(\"svg-border-corner svg-cursor-nesw\");\r\n                    }\r\n                }\r\n            }\r\n        },\r\n\r\n        createConnectPoints: function(positionGroup, isShow){\r\n            var padding = 0,\r\n                corderWidth = 6,\r\n                box = positionGroup.bbox(),\r\n                group = this.svg.group().addClass(\"svg-group-points\"),\r\n                centerPoints = [\r\n                    {cx: box.cx, cy: box.cy - box.height/2 - padding, width: corderWidth},\r\n                    {cx: box.cx + box.width/2 + padding, cy: box.cy, width: corderWidth},\r\n                    {cx: box.cx, cy: box.cy + box.height/2 + padding, width: corderWidth},\r\n                    {cx: box.cx - box.width/2 - padding, cy: box.cy, width: corderWidth},\r\n                ],\r\n                circle = null;\r\n            if (!isShow) {\r\n                group.addClass(\"dsn\");\r\n            }\r\n            this.pointGroup = group;\r\n            for (var i = 0, len = centerPoints.length; i < len; i ++) {\r\n                box = centerPoints[i];\r\n                circle = group.circle(box.width).center(box.cx, box.cy)\r\n                circle.fill(\"#999\");\r\n            }\r\n        },\r\n        setPointGroupStatus: function(isShow){\r\n            if (!this.pointGroup) {\r\n                return;\r\n            }\r\n            if (isShow) {\r\n                this.pointGroup.removeClass(\"dsn\");\r\n            } else {\r\n                this.pointGroup.addClass(\"dsn\");\r\n            }\r\n        },\r\n        setBorderGroupStatus: function(isShow){\r\n            if (!this.borderGroup) {\r\n                return;\r\n            }\r\n            if (isShow) {\r\n                this.borderGroup.removeClass(\"dsn\");\r\n            } else {\r\n                this.borderGroup.addClass(\"dsn\");\r\n            }\r\n        },\r\n        removeSelected: function(){\r\n            this.setBorderGroupStatus(false);\r\n            this.isSelected = false;\r\n        },\r\n        selectedView: function(){\r\n            this.setBorderGroupStatus(true);\r\n            this.isSelected = true;\r\n        },\r\n        moveView: function(offset){\r\n            var transform = this.svg.transform();\r\n            this.svg.transform({\r\n                x: transform.x+offset.x,\r\n                y: transform.y+offset.y\r\n            });\r\n        },\r\n        moveEnd: function(){\r\n            var transform = this.svg.transform();\r\n            this.model.set({ offset: transform });\r\n        },\r\n        resizeView: function(size){\r\n            this.model.set({\r\n                width: size.width,\r\n                height: size.height,\r\n                centerX: size.centerX,\r\n                centerY: size.centerY\r\n            });\r\n        },\r\n    });\r\n\r\n    var LineView = View.extend({\r\n        tagName: \"g\",\r\n        className: \"svg-line\",\r\n        type: \"line\",\r\n        defaultStyle: {\r\n            strokeColor: \"#333\",\r\n        },\r\n        defaultSize: {\r\n            width: 100,\r\n            height: 60\r\n        },\r\n        init: function() {\r\n            this.svg = new SVG.G().addClass(this.className);\r\n            this.lineGroup = null;\r\n            this.borderGroup = null;\r\n            this.pointGroup = null;\r\n\r\n            this.isSelected = false;\r\n\r\n            this.setElement(this.svg.node);\r\n            this.on({\r\n                \"move\": this.moveView,\r\n                \"moveEnd\": this.moveEnd,\r\n                \"resize\": this.resizeView,\r\n            }, this);\r\n        },\r\n\r\n        events: {\r\n        },\r\n        resizeView: function(size){\r\n            this.model.set({\r\n                width: size.width,\r\n                height: size.height,\r\n                centerX: size.centerX,\r\n                centerY: size.centerY\r\n            });\r\n        },\r\n        createBorder: function(isShow){\r\n            var points = this.getMovePoints();\r\n                corderWidth = 4,\r\n                group = this.svg.group().addClass(\"svg-group-border\"),\r\n                centerPoints = [\r\n                    {cx: points.start.x, cy: points.start.y, width: corderWidth, height: corderWidth},\r\n                    {cx: points.end.x, cy: points.end.y, width: corderWidth, height: corderWidth},\r\n                ],\r\n                path = null;\r\n            if (points.mid){\r\n                centerPoints.push({cx: points.mid.x, cy: points.mid.y, width: corderWidth, height: corderWidth});\r\n            }\r\n            if (!isShow) {\r\n                group.addClass(\"dsn\");\r\n            }\r\n            this.borderGroup = group;\r\n            for (var i = 0, len = centerPoints.length; i < len; i ++) {\r\n                box = centerPoints[i];\r\n                path = group.path(\r\n                    \"M \" + (box.cx - box.width/2) + \" \" + (box.cy - box.height/2) +\r\n                    \"L \" + (box.cx + box.width/2) + \" \" + (box.cy - box.height/2) +\r\n                    \"L \" + (box.cx + box.width/2) + \" \" + (box.cy + box.height/2) +\r\n                    \"L \" + (box.cx - box.width/2) + \" \" + (box.cy + box.height/2) +\r\n                    \"Z\"\r\n                );\r\n                path.stroke({ color: \"#60f\"})\r\n                    .fill(\"#fff\")\r\n                    .addClass(\"svg-border-corner svg-cursor-nesw\");\r\n                if (i == 0) {\r\n                    path.removeClass(\"svg-cursor-nesw\").addClass(\"svg-cursor-nwse\");\r\n                }\r\n                if (i == 2) {\r\n                    path.removeClass(\"svg-cursor-nesw\").addClass(\"svg-cursor-ew\");\r\n                }\r\n            }\r\n        },\r\n        getSize: function(){\r\n            return {\r\n                width: this.model.get(\"width\") || this.defaultSize.width,\r\n                height: this.model.get(\"height\") || this.defaultSize.height\r\n            }\r\n        },\r\n        getLineDefaultPoints: function(){\r\n            var modelData = this.model.toJSON(),\r\n                size = this.getSize();\r\n            return {\r\n                start: {\r\n                    x: parseInt(modelData.centerX - size.width / 2),\r\n                    y: parseInt(modelData.centerY)\r\n                }, \r\n                end: {\r\n                    x: parseInt(modelData.centerX + size.width / 2),\r\n                    y: parseInt(modelData.centerY)\r\n                }\r\n            };\r\n        },\r\n        getPolylineDefaultPoints: function(){\r\n            var modelData = this.model.toJSON(),\r\n                size = this.getSize();\r\n            return {\r\n                start: {\r\n                    x: parseInt(modelData.centerX - size.width / 2),\r\n                    y: parseInt(modelData.centerY - size.height / 2)\r\n                },\r\n                point1: {\r\n                    x: parseInt(modelData.centerX),\r\n                    y: parseInt(modelData.centerY - size.height / 2)\r\n                },\r\n                point2: {\r\n                    x: parseInt(modelData.centerX),\r\n                    y: parseInt(modelData.centerY + size.height / 2)\r\n                },\r\n                end: {\r\n                    x: parseInt(modelData.centerX + size.width / 2),\r\n                    y: parseInt(modelData.centerY + size.height / 2)\r\n                }\r\n            };\r\n        },\r\n        getPoints: function(){\r\n            var modelData = this.model.toJSON();\r\n            if (modelData.points.length) {\r\n                return modelData.points;\r\n            }\r\n            if (modelData.value == \"line\") {\r\n                return this.getLineDefaultPoints();\r\n            } else {\r\n                return this.getPolylineDefaultPoints();\r\n            }\r\n        },\r\n        getEndPoints: function(){\r\n            var points = this.getPoints();\r\n            return {\r\n                start: points.start,\r\n                end: points.end\r\n            };\r\n        },\r\n        getMidPoints: function(){\r\n            var points = this.getPoints();\r\n            if (points.point1 || points.point2) {\r\n                return {\r\n                    point1: points.point1,\r\n                    point2: points.point2\r\n                };\r\n            }\r\n            return null;\r\n        },\r\n        getMovePoints: function(){\r\n            var modelData = this.model.toJSON();\r\n                points = this.getEndPoints();\r\n            if (modelData.value == \"line\") {\r\n                return points;\r\n            }\r\n            return _.extend({mid: {x: modelData.centerX, y: modelData.centerY}}, points);\r\n        },\r\n        create: function(pos, type) {\r\n            var group = this.svg.group().addClass(\"svg-line-group\"),\r\n                line = null,\r\n                d = \"\",\r\n                points = this.getPoints();\r\n            if (points.point1) {\r\n                d = \"M \" + points.start.x + \" \" + points.start.y +\r\n                    \" L \" + points.point1.x + \" \" + points.point1.y +\r\n                    \" L \" + points.point2.x + \" \" + points.point2.y +\r\n                    \" L \" + points.end.x + \" \" + points.end.y;\r\n            } else {\r\n                d = \"M \" + points.start.x + \" \" + points.start.y +\r\n                    \" L \" + points.end.x + \" \" + points.end.y;\r\n            }\r\n            group.path(d).attr({\r\n                stroke: \"transparent\",\r\n                \"stroke-width\": 5,\r\n                fill: \"transparent\"\r\n            });\r\n            group.path(d).attr({\r\n                stroke: this.defaultStyle.strokeColor,\r\n                fill: \"transparent\"\r\n            });\r\n        },\r\n        render: function() {\r\n            var data = this.model.toJSON();\r\n            this.svg.clear();\r\n            if (data.offset) {\r\n                this.svg.transform(data.offset);\r\n            }\r\n            this.create({ x: data.centerX, y: data.centerY }, data.value);\r\n            this.createBorder(this.isSelected);\r\n            return this;\r\n        },\r\n    });\r\n\r\n    var RectView = View.extend({\r\n        tagName: \"g\",\r\n        className: \"svg-rect\",\r\n        type: \"rect\",\r\n        defaultStyle: {\r\n            fill: \"#fff\",\r\n            strokeColor: \"#333\",\r\n            fontSize: 12,\r\n            color: \"#666\"\r\n        },\r\n        defaultSize: {\r\n            width: 100,\r\n            height: 60,\r\n            radius: 4\r\n        },\r\n        init: function() {\r\n            this.svg = new SVG.G().addClass(this.className);\r\n            this.borderGroup = null;\r\n            this.rectGroup = null;\r\n            this.pointGroup = null;\r\n            this.isSelected = false;\r\n            this.setElement(this.svg.node);\r\n            this.on({\r\n                \"move\": this.moveView,\r\n                \"moveEnd\": this.moveEnd,\r\n                \"resize\": this.resizeView,\r\n            }, this);\r\n        },\r\n\r\n        events: {\r\n            \"dblclick\": \"showTextEdit\",\r\n        },\r\n        showTextEdit: function(event) {\r\n            var box = this.svg.rbox(),\r\n                pos = {\r\n                    x: box.x,\r\n                    y: box.y,\r\n                    width: box.width,\r\n                    height: box.height\r\n                },\r\n                self = this;\r\n            C.textInput.init(pos, { text: this.model.get(\"text\") }, function(data) {\r\n                self.model.set({ text: data.text, width: data.width, height: data.height });\r\n            }, \"triggerByTarget\");\r\n        },\r\n        create: function(pos, type, text) {\r\n            var group = this.svg.group().addClass(\"svg-rect-group\"),\r\n                rect = null,\r\n                width = this.model.get(\"width\") || this.defaultSize.width,\r\n                height = this.model.get(\"height\") || this.defaultSize.height;\r\n            this.rectGroup = group;\r\n            rect = group.rect(width, height);\r\n            rect.attr({\r\n                x: pos.x - width / 2,\r\n                y: pos.y - height / 2,\r\n                fill: this.defaultStyle.fill,\r\n                stroke: this.defaultStyle.strokeColor\r\n            });\r\n            if (type == \"round-rect\") {\r\n                rect.radius(this.defaultSize.radius);\r\n            }\r\n            if (text) {\r\n                text = this.setSvgText(text, group)\r\n                    .addClass(\"svg-rect-text\")\r\n                    .attr({\r\n                        fill: this.defaultStyle.color\r\n                    }).leading(1);\r\n                text.center(pos.x, pos.y);\r\n            }\r\n        },\r\n        render: function() {\r\n            var data = this.model.toJSON();\r\n            this.svg.clear();\r\n            if (data.offset) {\r\n                this.svg.transform(data.offset);\r\n            }\r\n            this.create({ x: data.centerX, y: data.centerY }, data.value, data.text);\r\n            this.createConnectPoints(this.rectGroup, this.isShowPoints);\r\n            this.createBorder(this.rectGroup, this.isSelected);\r\n            return this;\r\n        },\r\n    });\r\n\r\n    var DeviceView = View.extend({\r\n        tagName: \"g\",\r\n        className: \"svg-device\",\r\n        type: \"device\",\r\n        defaultStyle: {\r\n            font: \"Helvetica\",\r\n            fontSize: 12,\r\n            color: \"#666\"\r\n        },\r\n        iconPadding: 10,\r\n        defaultSize: {\r\n            width: 60,\r\n            height: 60\r\n        },\r\n        init: function() {\r\n            this.svg = new SVG.G().addClass(this.className);\r\n            this.deviceGroup = null;\r\n            this.borderGroup = null;\r\n            this.pointGroup = null;\r\n            this.isSelected = false;\r\n            this.setElement(this.svg.node);\r\n\r\n            this.on({\r\n                \"move\": this.moveView,\r\n                \"moveEnd\": this.moveEnd,\r\n                \"resize\": this.resizeView,\r\n            }, this);\r\n\r\n            this.listenTo(this.model, \"change:deviceId\", this.updateDeviceId);\r\n            this.listenTo(Backbone, \"setId\", this.setDeviceId);\r\n        },\r\n\r\n        events: {\r\n            \"dblclick\": \"showDeviceIdList\",\r\n        },\r\n        updateDeviceId: function(model, newId) {\r\n            var id = model.previous(\"deviceId\");\r\n            if (id && id != newId) {\r\n                Backbone.trigger(\"updateDeviceIdStatus\", { type: this.model.get(\"value\"), id: id, status: true });\r\n            }\r\n        },\r\n        setDeviceId: function(options) {\r\n            if (options.viewId == this.id) {\r\n                this.model.set({ deviceId: options.deviceId, deviceName: options.deviceName });\r\n            }\r\n        },\r\n        showDeviceIdList: function(event) {\r\n            Backbone.trigger(\"showDeviceIdList\", { type: this.model.get(\"value\"), pos: { x: event.clientX, y: event.clientY }, id: this.id });\r\n        },\r\n\r\n        getImgUrl: function(type) {\r\n            return \"/imgs/\" + type + \".svg\";\r\n        },\r\n        create: function(pos, type, deviceName) {\r\n            var group = this.svg.group().addClass(\"svg-device-group\"),\r\n                img = null,\r\n                text = null,\r\n                box = null,\r\n                width = this.model.get(\"width\") || this.defaultSize.width,\r\n                height = this.model.get(\"height\") || this.defaultSize.height;\r\n            deviceName = deviceName || \"设置设备\";\r\n            text = group.text(\"\" + deviceName)\r\n                .addClass(\"svg-device-id\")\r\n                .font({\r\n                    fill: this.defaultStyle.color,\r\n                    family: this.defaultStyle.font,\r\n                    size: this.defaultStyle.size\r\n                });\r\n            box = text.rbox();\r\n            text.attr({\r\n                x: pos.x - box.width / 2,\r\n                y: pos.y - height / 2 - box.height - this.iconPadding\r\n            });\r\n            img = group.image(this.getImgUrl(type), width, height)\r\n                .attr({\r\n                    x: pos.x - width / 2,\r\n                    y: pos.y - height / 2\r\n                });\r\n            this.deviceGroup = group;\r\n        },\r\n        render: function() {\r\n            var data = this.model.toJSON();\r\n            if (this.deviceGroup) {\r\n                this.svg.clear();\r\n            }\r\n            if (data.offset) {\r\n                this.svg.transform(data.offset);\r\n            }\r\n            this.create({ x: data.centerX, y: data.centerY }, data.value, data.deviceName);\r\n            this.createConnectPoints(this.deviceGroup, this.isShowPoints);\r\n            this.createBorder(this.deviceGroup, this.isSelected);\r\n            return this;\r\n        },\r\n    });\r\n\r\n    return {\r\n        base: BaseView,\r\n        line: LineView,\r\n        rect: RectView,\r\n        device: DeviceView,\r\n\r\n    }\r\n});\n","define('model',[\"jquery\", \"underscore\", \"backbone\", \"svg\"], function($, _, Backbone, SVG) {\r\n    var Model = Backbone.Model.extend({\r\n        defaults: function() {\r\n            return {\r\n                id: 0,\r\n                // 左上角\r\n                x: 0,\r\n                y: 0,\r\n                // 中心点\r\n                centerX: 0,\r\n                centerY: 0,\r\n                // 类型(tool 和 device)和值\r\n                type: \"\",\r\n                value: \"\",\r\n                width: 0,\r\n                height: 0,\r\n                zIndex: 0,\r\n                points: [],\r\n                offset: null,\r\n\r\n                deviceId: \"\",\r\n                deviceName: \"\",\r\n\r\n                text: \"\",\r\n                font: \"\",\r\n                fontSize: 0,\r\n                fontStyle: \"\",\r\n\r\n                borderWidth: 0,\r\n                borderStyle: \"\",\r\n                strokeColor: \"\",\r\n                fullColor: \"\",\r\n\r\n                rotate: 0,\r\n\r\n                parentId: \"\",\r\n                children: []\r\n            }\r\n        },\r\n\r\n        sync: function(method, model, options) {\r\n            if (method != \"DELETE\") {\r\n                model.set(\"id\", model.cid);\r\n            }\r\n            options.success({});\r\n        },\r\n\r\n    });\r\n\r\n    var LineModel = Model.extend({\r\n        defaults: function() {\r\n            var defaults_parent = _.result(Model.prototype, 'defaults'),\r\n                defaults_self = {};\r\n            return _.defaults(defaults_self, defaults_parent);\r\n        },\r\n    });\r\n\r\n    var RectModel = Model.extend({});\r\n\r\n    var DeviceModel = Model.extend({});\r\n\r\n    return {\r\n        base: Model,\r\n        line: LineModel,\r\n        rect: RectModel,\r\n        device: DeviceModel\r\n    }\r\n});\n","define('collection',[\"jquery\", \"underscore\", \"backbone\", \"svg\", \"model\"], function($, _, Backbone, SVG, Model) {\r\n    var Collection = Backbone.Collection.extend({\r\n        initialize: function(){ },\r\n    });\r\n\r\n    var LineCollection = Collection.extend({\r\n        model: Model.line\r\n    });\r\n\r\n    var RectCollection = Collection.extend({\r\n        model: Model.rect\r\n    });\r\n\r\n    var DeviceCollection = Collection.extend({\r\n        model: Model.device\r\n    });\r\n\r\n    return {\r\n        base: Collection,\r\n        line: LineCollection,\r\n        rect: RectCollection,\r\n        device: DeviceCollection\r\n    }\r\n});\n","require.config({\r\n    baseUrl: \"js\",\r\n    paths: {\r\n        \"jquery\": \"lib/jquery.min\",\r\n        \"underscore\": \"lib/underscore.min\",\r\n        // TODO\r\n        \"backbone\": \"lib/backbone\",\r\n        \"svg\": \"lib/svg.min\",\r\n    }\r\n});\r\nrequire(\r\n    [\"jquery\", \"underscore\", \"backbone\", \"svg\", \"common\", \"attrs\", \"tools\", \"devices\", \"view\", \"model\", \"collection\"],\r\n    function($, _, Backbone, SVG, C, Attr, Tool, Device, View, Model, Collection) {\r\n        $(\".color, .full-color, .stroke-color\").click(function() {\r\n            var $target = $(this);\r\n            C.colorPicker.init($target, \"000000\", function(color) {\r\n                C.layer.topNotify(\"info\", { content: \"颜色值: #\" + color, shade: false, time: 2 });\r\n            }, \"triggerByTarget\");\r\n        });\r\n        var data = {\r\n            type: \"with-selected\",\r\n            menus: [{\r\n                    operate: \"copy\",\r\n                    status: \"selected\",\r\n                    value: \"\",\r\n                    text: \"复制\",\r\n                    shortcut: \"ctrl+c\"\r\n                },\r\n                {\r\n                    operate: \"copy\",\r\n                    status: \"disabled\",\r\n                    value: \"\",\r\n                    text: \"复制\",\r\n                    shortcut: \"ctrl+c\"\r\n                },\r\n                {\r\n                    type: \"separator\"\r\n                },\r\n                {\r\n                    operate: \"cut\",\r\n                    status: \"\",\r\n                    value: \"cut\",\r\n                    text: \"剪切\",\r\n                    shortcut: \"ctrl+x\"\r\n                },\r\n                {\r\n                    operate: \"page\",\r\n                    status: \"\",\r\n                    value: \"paste\",\r\n                    text: \"粘贴\",\r\n                    shortcut: \"ctrl+v\"\r\n                }\r\n            ]\r\n        };\r\n        var data1 = {\r\n            type: \"\",\r\n            menus: [{\r\n                    operate: \"copy\",\r\n                    status: \"selected\",\r\n                    value: \"\",\r\n                    text: \"复制\",\r\n                    shortcut: \"ctrl+c\"\r\n                },\r\n                {\r\n                    operate: \"copy\",\r\n                    status: \"disabled\",\r\n                    value: \"\",\r\n                    text: \"复制\",\r\n                    shortcut: \"ctrl+c\"\r\n                },\r\n                {\r\n                    type: \"separator\"\r\n                },\r\n                {\r\n                    operate: \"cut\",\r\n                    status: \"\",\r\n                    value: \"cut\",\r\n                    text: \"剪切\",\r\n                    shortcut: \"ctrl+x\"\r\n                },\r\n                {\r\n                    operate: \"page\",\r\n                    status: \"\",\r\n                    value: \"paste\",\r\n                    text: \"粘贴\",\r\n                    shortcut: \"ctrl+v\"\r\n                }\r\n            ]\r\n        };\r\n\r\n        $(\".border-width, .border-style\").click(function(event) {\r\n            var $target = $(this);\r\n            C.popupMenu.init($target, data, function(operate, value) {\r\n                C.layer.topNotify(\"info\", { content: \"operate: \" + operate + \"<br />value: \" + value, shade: false, time: 2 });\r\n            }, \"triggerByTarget\");\r\n        });\r\n\r\n        var AppView = View.base.extend({\r\n\r\n            initialize: function(data) {\r\n                this.data = data;\r\n                this.$main = $(\"<div></div>\").addClass(\"draw-container\");\r\n                this.$el.append(this.$main);\r\n\r\n                this.svg = null;\r\n                this.bg = null;\r\n                this.selectTipsBox = null;\r\n                this.deviceView = null;\r\n                this.toolView = null;\r\n                this.attrView = null;\r\n                this.deviceCollections = new Collection.device();\r\n                this.rectCollections = new Collection.rect();\r\n                this.lineCollections = new Collection.line();\r\n\r\n                this.elemToBeAdd = null;\r\n                this.subViews = {};\r\n\r\n                this.itemToBeAdd = {\r\n                    type: \"\",\r\n                    value: \"\",\r\n                };\r\n\r\n                this.attrSelected = {\r\n                    type: \"\",\r\n                    value: \"\",\r\n                };\r\n\r\n                this.selectedViews = [];\r\n\r\n                if (data.isEdit) {\r\n                    this.$main.addClass(\"can-edit\");\r\n                    this.initAttr();\r\n                    this.render(data);\r\n                    this.initTool(data.tools);\r\n                    this.initDevice(data.devices);\r\n                    this.setRightBtnMenu();\r\n                } else {\r\n                    this.render(data);\r\n                }\r\n\r\n                this.setOtherEvents();\r\n                this.setBodyEvents();\r\n            },\r\n\r\n            getSelectedViewByTarget: function(event){\r\n                var className = \"svg-view\",\r\n                    $target = $(event.target),\r\n                    id = 0;\r\n                if ($target.hasClass(className)) {\r\n                    id = $target.attr(\"data-id\");\r\n                } else if ($target.parents(\".\" + className).length) {\r\n                    $target = $target.parents(\".\" + className);\r\n                    id = $target.attr(\"data-id\");\r\n                }\r\n                if (id) {\r\n                    return this.getSubView(id);\r\n                }\r\n                return null;\r\n            },\r\n            isMoveOperate: function(event){\r\n                var className = \"svg-group-border\",\r\n                    $target = $(event.target);\r\n                if ($target.hasClass(className) || $target.parents(\".\" + className).length) {\r\n                    return false;\r\n                }\r\n                return true;\r\n            },\r\n            isClickOnEle: function(event, className){\r\n                var $target = $(event.target);\r\n                if ($target.hasClass(className) || $target.parents(\".\" + className).length) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            },\r\n            isClickOnSvgView: function(event){\r\n                return this.isClickOnEle(event, \"svg-view\");\r\n            },\r\n            isClickOnAttrEle: function(event){\r\n                return this.isClickOnEle(event, \"top-attrs\");\r\n            },\r\n            isClickOnPopup: function(event){\r\n                return this.isClickOnEle(event, \"common-popup-block\");\r\n            },\r\n            isClickOnDraw: function(event){\r\n                return this.isClickOnEle(event, \"draw-content\");\r\n            },\r\n            isClickOnTool: function(event){\r\n                return this.isClickOnEle(event, \"left-tools\");\r\n            },\r\n            isClickOnDevice: function(event){\r\n                return this.isClickOnEle(event, \"bottom-icons\");\r\n            },\r\n            getClickAttr: function(event){},\r\n\r\n            moveView: function(offset){\r\n                this.selectedViews.forEach(function(view){\r\n                    view.trigger(\"move\", offset);\r\n                });\r\n            },\r\n            endMoveView: function(){\r\n                this.selectedViews.forEach(function(view){\r\n                    view.trigger(\"moveEnd\");\r\n                });\r\n            },\r\n            setMoveEvents: function(){\r\n                var self = this,\r\n                    isClickOnSvgView = false;\r\n                    lastPos = null;\r\n                $(document).mousedown(function(event){\r\n                    if (event.button == 0 && self.isMoveOperate(event)) {\r\n                        isClickOnSvgView = self.isClickOnSvgView(event);\r\n                        lastPos = {\r\n                            x: event.clientX,\r\n                            y: event.clientY\r\n                        };\r\n                    }\r\n                });\r\n                $(document).mousemove(function(event){\r\n                    if (lastPos && isClickOnSvgView) {\r\n                        var offset = {\r\n                            x: event.clientX - lastPos.x,\r\n                            y: event.clientY - lastPos.y\r\n                        };\r\n                        lastPos = {\r\n                            x: event.clientX,\r\n                            y: event.clientY\r\n                        };\r\n                        self.moveView(offset);\r\n                    }\r\n                });\r\n                $(document).click(function(event){\r\n                    if (lastPos && isClickOnSvgView) {\r\n                        self.endMoveView();\r\n                    }\r\n                    lastPos = null;\r\n                    isClickOnSvgView = false;\r\n                });\r\n                $(document).keydown(function(event){\r\n                    var key = event.key || event.keyCode,\r\n                        offset = {x: 0, y: 0};\r\n                    if (key == \"ArrowUp\" || key == 38) {\r\n                        offset.y -= 1;\r\n                    } else if (key == \"ArrowDown\" || key == 40) { // down\r\n                        offset.y += 1;\r\n                    } else if (key == \"ArrowLeft\" || key == 37) { // left\r\n                        offset.x -= 1;\r\n                    } else if (key == \"ArrowRight\" || key == 39) { // right\r\n                        offset.x += 1;\r\n                    }\r\n                    self.moveView(offset);\r\n                    self.endMoveView();\r\n                });\r\n            },\r\n\r\n            setResizeEvents: function(){\r\n                var self = this,\r\n                    selectedView = null,\r\n                    lastPos = null,\r\n                    size = null,\r\n                    points = null,\r\n                    order = 0;\r\n                $(document).mousedown(function(event){\r\n                    if (event.button == 0 && !self.isMoveOperate(event)) {\r\n                        selectedView = self.getSelectedViewByTarget(event);\r\n                        points = selectedView.model.get(\"points\");\r\n                        order = event.target.getAttribute(\"data-order\") || 0;\r\n                        size = {\r\n                            width: selectedView.model.get(\"width\") || selectedView.defaultSize.width,\r\n                            height: selectedView.model.get(\"height\") || selectedView.defaultSize.height,\r\n                            centerX: selectedView.model.get(\"centerX\"),\r\n                            centerY: selectedView.model.get(\"centerY\"),\r\n                        };\r\n                    }\r\n                    if (selectedView && size) {\r\n                        lastPos = {\r\n                            x: event.clientX,\r\n                            y: event.clientY\r\n                        };\r\n                    }\r\n                });\r\n                $(document).mousemove(function(event){\r\n                    if (selectedView && lastPos && size) {\r\n                        var type = selectedView.model.get(\"value\"),\r\n                            scaleOffset = C.utils.getScaleOffset(parseInt(order), lastPos, { x: event.clientX, y: event.clientY });\r\n                        var offset = {\r\n                            width: size.width + scaleOffset.x,\r\n                            height: size.height + scaleOffset.y,\r\n                            centerX: size.centerX + (event.clientX - lastPos.x)/2,\r\n                            centerY: size.centerY + (event.clientY - lastPos.y)/2,\r\n                        };\r\n                        if (type == \"line\" || type == \"polyline\") {\r\n                            offset.points = points;\r\n                        }\r\n                        selectedView.trigger(\"resize\", offset);\r\n                    }\r\n                });\r\n                $(document).mouseup(function(event){\r\n                    lastPos = null;\r\n                    selectedView = null;\r\n                    order = 0;\r\n                    size = null;\r\n                });\r\n            },\r\n\r\n            removeSelectedView: function() {\r\n                this.selectedViews.forEach(function(view){\r\n                    view.trigger(\"removeSelected\");\r\n                });\r\n                this.selectedViews = [];\r\n            },\r\n\r\n            updateAttrBySelectedView: function(){\r\n                var types = [];\r\n                this.selectedViews.forEach(function(view){\r\n                    types.push(view.type);\r\n                });\r\n                this.attrView.trigger(\"showTypeAttr\", {types: types});\r\n            },\r\n\r\n            selectView: function(view, isAppend){\r\n                if (!isAppend) {\r\n                    var index = this.selectedViews.indexOf(view);\r\n                    if (!!~index) {\r\n                        return;\r\n                    }\r\n                    this.removeSelectedView();\r\n                    this.selectedViews.push(view);\r\n                    view.trigger(\"setSelected\");\r\n                } else {\r\n                    var index = this.selectedViews.indexOf(view);\r\n                    if (!~index) {\r\n                        this.selectedViews.push(view);\r\n                        view.trigger(\"setSelected\");\r\n                    } else {\r\n                        this.selectedViews.splice(index, 1);\r\n                        view.trigger(\"removeSelected\");\r\n                    }\r\n                }\r\n                this.updateAttrBySelectedView();\r\n            },\r\n            getInsideView: function(area){\r\n                var views = [];\r\n                _.each(this.subViews, function(view){\r\n                    var box = view.svg.bbox(),\r\n                        rect = [\r\n                            {x: box.x, y: box.y},\r\n                            {x: box.x2, y: box.y2},\r\n                        ];\r\n                    if (view.type == \"line\") {\r\n                        if (C.utils.isRectContain(area, rect)) {\r\n                            views.push(view);\r\n                        }\r\n                    } else if (C.utils.isRectIntersect(area, rect)) {\r\n                        views.push(view);\r\n                    }\r\n                });\r\n                return views;\r\n            },\r\n            setSelectEvents: function(){\r\n                var self = this,\r\n                    lastPos = null;\r\n                    isSelecting = false,\r\n                    insideViews = [];\r\n                $(document).mousedown(function(event){\r\n                    if (event.button != 0) {\r\n                        return;\r\n                    }\r\n                    var $target = $(event.target),\r\n                        isClickOnAttrEle = self.isClickOnAttrEle(event),\r\n                        selectedView = self.getSelectedViewByTarget(event);\r\n                    if (!isClickOnAttrEle && !selectedView) {\r\n                        if (self.selectedViews.length) {\r\n                            self.removeSelectedView();\r\n                        }\r\n                        self.attrView.trigger(\"showTypeAttr\");\r\n                        if (self.isClickOnDraw(event)) {\r\n                            isSelecting = true;\r\n                            lastPos = {\r\n                                x: event.clientX,\r\n                                y: event.clientY\r\n                            };\r\n                        }\r\n                    } else if (selectedView) {\r\n                        self.selectView(selectedView, event.ctrlKey);\r\n                    }\r\n                });\r\n                $(document).mousemove(function(event){\r\n                    if (isSelecting && lastPos) {\r\n                        if (!self.selectTipsBox) {\r\n                            self.selectTipsBox = self.svg.group().addClass(\"svg-select-tips\");\r\n                        }\r\n                        var startPos = self.domToSvgPos(lastPos),\r\n                            endPos = self.domToSvgPos({\r\n                                x: event.clientX,\r\n                                y: event.clientY\r\n                            }),\r\n                            rectPoints = C.utils.getRectPoints(startPos, endPos);\r\n                        self.selectTipsBox.clear();\r\n                        self.selectTipsBox.rect(Math.abs(endPos.x - startPos.x), Math.abs(endPos.y-startPos.y))\r\n                            .attr({\r\n                                x: parseInt(rectPoints[0].x) + 0.5,\r\n                                y: parseInt(rectPoints[0].y) + 0.5\r\n                            })\r\n                            .fill(\"rgba(0, 0, 120, 0.05)\")\r\n                            .stroke({ color: \"rgba(0,0,120, 0.8)\" });\r\n                        insideViews = self.getInsideView([rectPoints[0], rectPoints[2]]);\r\n                    }\r\n                });\r\n                $(document).mouseup(function(event){\r\n                    isSelecting = false;\r\n                    lastPos = null;\r\n                    if (self.selectTipsBox) {\r\n                        self.selectTipsBox.remove();\r\n                    }\r\n                    self.selectTipsBox = null;\r\n                    if (insideViews.length) {\r\n                        insideViews.forEach(function(view){\r\n                            self.selectedViews.push(view);\r\n                            view.trigger(\"setSelected\");\r\n                        });\r\n                    }\r\n                    insideViews = [];\r\n                });\r\n            },\r\n\r\n            setSelectedItem: function(data) {\r\n                this.clearItemToBeAdd();\r\n                this.itemToBeAdd = _.extend({}, data);\r\n            },\r\n            clearItemToBeAdd: function(){\r\n                if (this.elemToBeAdd) {\r\n                    this.elemToBeAdd = null;\r\n                }\r\n            },\r\n            clearSelectedItem: function() {\r\n                this.itemToBeAdd = { type: \"\", value: \"\" };\r\n                this.clearItemToBeAdd();\r\n                this.toolView.trigger(\"selectDone\");\r\n                this.deviceView.trigger(\"selectDone\");\r\n            },\r\n            hover: function(event) {\r\n                if (this.itemToBeAdd.type && this.itemToBeAdd.value) {\r\n                    this.showItemToBeAdd(event);\r\n                } else {}\r\n            },\r\n            showItemToBeAdd: function(event) {\r\n                var pos = this.getMousePos(event),\r\n                    model = this.createItem(this.itemToBeAdd, pos);\r\n                this.createItemView(model, {isToBeAdd: true});\r\n            },\r\n            removeItemView: function(){\r\n                if (this.elemToBeAdd) {\r\n                    var collection = this.getTypeItem(this.elemToBeAdd.model.toJSON());\r\n                    collection.remove(this.elemToBeAdd.model);\r\n                    this.elemToBeAdd.model.destroy();\r\n                }\r\n            },\r\n            addItem: function(event) {\r\n                var pos = this.getMousePos(event),\r\n                    model = null;\r\n                if (this.itemToBeAdd.type && this.itemToBeAdd.value) {\r\n                    if (!this.isClickOnDraw(event)) {\r\n                        this.removeItemView();\r\n                    } else {\r\n                        model = this.createItem(this.itemToBeAdd, pos);\r\n                        this.createItemView(model, {isToBeAdd: false});\r\n                    }\r\n                    this.clearSelectedItem();\r\n                }\r\n            },\r\n            getTypeItem: function(data) {\r\n                if (data.value == \"rect\" || data.value == \"round-rect\") {\r\n                    return this.rectCollections;\r\n                } else if (data.value == \"line\" || data.value == \"polyline\") {\r\n                    return this.lineCollections;\r\n                } else if (data.value) {\r\n                    return this.deviceCollections;\r\n                }\r\n                return null;\r\n            },\r\n            createItem: function(item, pos) {\r\n                var collection = this.getTypeItem(item),\r\n                    model = null,\r\n                    view = null;\r\n                if (!this.elemToBeAdd) {\r\n                    model = collection.create({\r\n                        centerX: pos.x,\r\n                        centerY: pos.y,\r\n                        type: item.type,\r\n                        value: item.value\r\n                    });\r\n                } else {\r\n                    model = this.elemToBeAdd.model.set({\r\n                        centerX: pos.x,\r\n                        centerY: pos.y\r\n                    });\r\n                }\r\n                return model;\r\n            },\r\n            createItemView: function(model, options) {\r\n                var data = model.toJSON(),\r\n                    type = \"\";\r\n                if (data.type == \"device\") {\r\n                    type = data.type;\r\n                } else if (data.value == \"line\" || data.value == \"polyline\") {\r\n                    type = \"line\";\r\n                } else if (data.value) {\r\n                    type = \"rect\";\r\n                }\r\n                return this.addItemView(type, model, options);\r\n            },\r\n            addSubView: function(view) {\r\n                var id = view.id || C.utils.count();\r\n                this.subViews[id] = view;\r\n                view.id = id;\r\n                view.svg.addClass(\"svg-view\").attr(\"data-id\", id);\r\n            },\r\n            getSubView: function(key) {\r\n                var view = null;\r\n                if (this.subViews.hasOwnProperty(key)) {\r\n                    view = this.subViews[key];\r\n                }\r\n                return view;\r\n            },\r\n            addItemView: function(type, model, options) {\r\n                var view = null;\r\n                if (!this.elemToBeAdd) {\r\n                    this.elemToBeAdd = view = new View[type]({ model: model, viewId: C.utils.count() });\r\n                    this.svg.add(view.render().svg);\r\n                } else {\r\n                    view = this.elemToBeAdd;\r\n                }\r\n                if (!options.isToBeAdd) {\r\n                    this.addSubView(view);\r\n                    this.selectView(view);\r\n                }\r\n            },\r\n            setAddViewEvents: function(){\r\n                var self = this;\r\n                $(document).mousedown(function(event){\r\n                    if (self.isClickOnDevice(event)) {\r\n                        self.deviceView.trigger(\"setSelected\", {event: event});\r\n                    } else if (self.isClickOnTool(event)) {\r\n                        self.toolView.trigger(\"setSelected\", {event: event});\r\n                    }\r\n                });\r\n                $(document).mousemove(function(event){\r\n                    self.hover(event);\r\n                });\r\n                $(document).mouseup(function(event){\r\n                    self.addItem(event);\r\n                });\r\n            },\r\n\r\n            setBodyEvents: function(){\r\n                this.setAddViewEvents();\r\n                this.setMoveEvents();\r\n                this.setResizeEvents();\r\n                this.setSelectEvents();\r\n            },\r\n            setOtherEvents: function() {\r\n                this.listenTo(Backbone, \"setScale\", this.scaleSvg);\r\n            },\r\n            scaleSvg: function(options) {\r\n                C.layer.topNotify(\"info\", {content: \"scale page \" + options.value + \"%\", shade: false, time: 2});\r\n            },\r\n\r\n            renderGrid: function() {\r\n                var gap = 12,\r\n                    box = this.svg.rbox(),\r\n                    start, end,\r\n                    shadowColor = \"#f2f2f2\",\r\n                    deepColor = \"#ccc\",\r\n                    lineWidth = 1,\r\n                    path,\r\n                    max = Math.max(box.width, box.height);\r\n                if (this.bg) {\r\n                    this.bg.clear();\r\n                } else {\r\n                    this.bg = this.svg.group();\r\n                }\r\n                for (i = 0; i <= max; i += gap) {\r\n                    if (i <= box.height) { // 横线\r\n                        path = this.bg.path(\"M \" + 0 + \" \" + i + \" L \" + box.width + \" \" + i);\r\n                        if ((i / gap) % 4) {\r\n                            path.stroke({ color: shadowColor });\r\n                        } else {\r\n                            path.stroke({ color: deepColor });\r\n                        }\r\n                        path.transform({ y: 0.5 });\r\n                    }\r\n                    if (i <= box.width) { // 竖线\r\n                        path = this.bg.path(\"M \" + i + \" \" + 0 + \" L \" + i + \" \" + box.height);\r\n                        if ((i / gap) % 4) {\r\n                            path.stroke({ color: shadowColor, width: lineWidth });\r\n                        } else {\r\n                            path.stroke({ color: deepColor, width: lineWidth });\r\n                        }\r\n                        path.transform({ x: 0.5 });\r\n                    }\r\n                }\r\n            },\r\n            render: function(data) {\r\n                var $elem = $(\"<div></div>\").addClass(\"draw-content\");\r\n                this.$main.append($elem.attr(\"id\", \"svg-wrapper\"));\r\n                this.svg = SVG($elem[0]).size(\"100%\", \"100%\");\r\n                this.renderGrid();\r\n            },\r\n            setRightBtnMenu: function() {\r\n                $(document).contextmenu(function(event) {\r\n                    var $target = $(event.target);\r\n                    if ($target.hasClass(\"draw-content\") || $target.parents(\".draw-content\").length) {\r\n                        C.popupMenu.init(event, data1, function(operate, value) {\r\n                            C.layer.topNotify(\"info\", { content: \"operate: \" + operate + \"<br />value: \" + value, shade: false, time: 2 });\r\n                        });\r\n                        return false;\r\n                    }\r\n                });\r\n            },\r\n\r\n            initAttr: function() {\r\n                this.attrView = new Attr.view({ model: new Attr.model()});\r\n                this.$main.append(this.attrView.render().el);\r\n            },\r\n\r\n            initDevice: function(devices) {\r\n                this.deviceView = new Device.view({ model: new Device.model(), devices: devices });\r\n                this.$main.append(this.deviceView.render().el);\r\n                var deviceHeight = $(\".bottom-icons\")[0].offsetHeight;\r\n                $(\".draw-content\").css(\"margin-bottom\", deviceHeight + \"px\");\r\n\r\n                this.listenTo(this.deviceView, \"selectDevice\", this.setSelectedItem);\r\n            },\r\n\r\n            initTool: function(tools) {\r\n                this.toolView = new Tool.view({ model: new Tool.model(), tools: tools });\r\n                this.$main.find(\".top-attrs\").after(this.toolView.render().el);\r\n\r\n                this.listenTo(this.toolView, \"selectTool\", this.setSelectedItem);\r\n            },\r\n        });\r\n        var app = null;\r\n\r\n        window.Draw = {\r\n            checkData: function(data) {\r\n                return data;\r\n            },\r\n            init: function(data, callback) {\r\n                var validData = this.checkData(data);\r\n                app = new AppView(validData);\r\n            },\r\n            save: function(callback) {\r\n                if (!app) {\r\n                    return;\r\n                }\r\n            },\r\n            setEvent: function(eventType, targetType, callback) {\r\n                if (!app) {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        Draw.init({\r\n                el: \".outer-container\",\r\n                isEdit: true,\r\n                tools: [{\r\n                        type: \"rect\",\r\n                        name: \"矩形\"\r\n                    },\r\n                    {\r\n                        type: \"round-rect\",\r\n                        name: \"圆角矩形\"\r\n                    },\r\n                    {\r\n                        type: \"line\",\r\n                        name: \"直线\"\r\n                    },\r\n                    {\r\n                        type: \"polyline\",\r\n                        name: \"折线\"\r\n                    },\r\n                ],\r\n                devices: [{\r\n                        type: 2,\r\n                        name: \"接地设备\",\r\n                        src: \"./imgs/2.svg\",\r\n                        devices: [{\r\n                                id: 1,\r\n                                name: \"jack-1jack-1jack-1\",\r\n                                available: true\r\n                            },\r\n                            {\r\n                                id: 2,\r\n                                name: \"jack-2\",\r\n                                available: true\r\n                            },\r\n                            {\r\n                                id: 3,\r\n                                name: \"jack-3\",\r\n                                available: true\r\n                            },\r\n                        ]\r\n                    },\r\n                    {\r\n                        type: 3,\r\n                        name: \"接地设备\",\r\n                        src: \"./imgs/3.svg\"\r\n                    },\r\n                    {\r\n                        type: 4,\r\n                        name: \"接地设备\",\r\n                        src: \"./imgs/4.svg\"\r\n                    },\r\n                    {\r\n                        type: 5,\r\n                        name: \"接地设备\",\r\n                        src: \"./imgs/5.svg\"\r\n                    }\r\n                ]\r\n            },\r\n            function() {\r\n                C.layer.topNotify(\"success\", { content: \"draw inited\", shade: false, time: 2 });\r\n            }\r\n        );\r\n    });\ndefine(\"draw\", function(){});\n\n"]}